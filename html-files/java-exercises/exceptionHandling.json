[
   
    {
        "programName": "Write a Java program that throws an exception and catch it using a try-catch block.",
        "code": "<span class='colorGreen'>// Write a Java program that throws an exception and catch it using a try-catch block.</span>\n// Custom exception class\nclass MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class program1 {\n    public static void main(String[] args) {\n        try {\n            // Attempt to perform an operation that may throw a custom exception\n            performCustomOperation();\n        } catch (MyCustomException ex) {\n            // Catch the specific custom exception and handle it\n            System.out.println(\"Custom Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (MyCustomException)\n    private static void performCustomOperation() throws MyCustomException {\n        // Simulating a situation where a custom exception is thrown\n        throw new MyCustomException(\"This is a custom exception\");\n    }\n}\n",
        "output": "Custom Exception caught: This is a custom exception\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to create a method that takes an integer as a parameter and throws an exception if the number is odd.",
        "code": "<span class='colorGreen'>// Write a Java program to create a method that takes an integer as a parameter and throws an exception if the number is odd.</span>\nclass OddNumberException extends Exception {\n    public OddNumberException(String message) {\n        super(message);\n    }\n}\n\npublic class program2 {\n    public static void main(String[] args) {\n        try {\n            // Test the method with an even number\n            checkIfOdd(4);\n            System.out.println(\"No exception for even number.\");\n\n            // Test the method with an odd number\n            checkIfOdd(7); // This will throw an exception\n        } catch (OddNumberException ex) {\n            // Catch the specific custom exception (OddNumberException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (OddNumberException) if the number is odd\n    private static void checkIfOdd(int number) throws OddNumberException {\n        if (number % 2 != 0) {\n            // Throw the custom exception if the number is odd\n            throw new OddNumberException(\"The number is odd: \" + number);\n        }\n    }\n}\n",
        "output": "No exception for even number.\n        Exception caught: The number is odd: 7\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to create a method that reads a file and throws an exception if the file is not found",
        "code": "<span class='colorGreen'>// Write a Java program to create a method that reads a file and throws an exception if the file is not found</span>\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n// Custom exception class for file not found\nclass FileNotFoundException extends Exception {\n    public FileNotFoundException(String message) {\n        super(message);\n    }\n}\n\npublic class program3 {\n    public static void main(String[] args) {\n        try {\n            // Test the method with an existing file\n            readFile(\"existingFile.txt\");\n\n            // Test the method with a non-existing file\n            readFile(\"nonExistingFile.txt\"); // This will throw an exception\n        } catch (FileNotFoundException ex) {\n            // Catch the specific custom exception (FileNotFoundException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (FileNotFoundException) if the file is not found\n    private static void readFile(String fileName) throws FileNotFoundException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n            // Read from the file (dummy operation for demonstration)\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            // If an IOException occurs, wrap it in a custom exception (FileNotFoundException)\n            throw new FileNotFoundException(\"File not found: \" + fileName);\n        }\n    }\n}\n",
        "output": "Exception caught: File not found: existingFile.txt\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program that reads a list of numbers from a file and throws an exception if any of the numbers are positive",
        "code": "<span class='colorGreen'>// Write a Java program that reads a list of numbers from a file and throws an exception if any of the numbers are positive</span>\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n// Custom exception class for positive numbers\nclass PositiveNumberException extends Exception {\n    public PositiveNumberException(String message) {\n        super(message);\n    }\n}\n\npublic class program4 {\n    public static void main(String[] args) {\n        try {\n            // Test the method with a file containing only non-positive numbers\n            readNumbersFromFile(\"nonPositiveNumbers.txt\");\n\n            // Test the method with a file containing positive numbers\n            readNumbersFromFile(\"positiveNumbers.txt\"); // This will throw an exception\n        } catch (PositiveNumberException ex) {\n            // Catch the specific custom exception (PositiveNumberException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } catch (IOException e) {\n            // Handle general IOException\n            System.out.println(\"IOException caught: \" + e.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (PositiveNumberException) if any number in the file is positive\n    private static void readNumbersFromFile(String fileName) throws PositiveNumberException, IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                int number = Integer.parseInt(line);\n                if (number > 0) {\n                    // If a positive number is found, throw the custom exception\n                    throw new PositiveNumberException(\"Positive number found: \" + number);\n                }\n                // Process non-positive numbers (dummy operation for demonstration)\n                System.out.println(\"Processed non-positive number: \" + number);\n            }\n        }\n    }\n}\n",
        "output": "Processed non-positive number: -4\n        Processed non-positive number: -2\n        Exception caught: Positive number found: 1\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program that reads a file and throws an exception if the file is empty.",
        "code": "<span class='colorGreen'>// Write a Java program that reads a file and throws an exception if the file is empty.</span>\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n// Custom exception class for empty files\nclass EmptyFileException extends Exception {\n    public EmptyFileException(String message) {\n        super(message);\n    }\n}\n\npublic class ReadFileAndCheckEmpty {\n    public static void main(String[] args) {\n        try {\n            // Test the method with a non-empty file\n            readFileAndCheckEmpty(\"nonEmptyFile.txt\");\n\n            // Test the method with an empty file\n            readFileAndCheckEmpty(\"emptyFile.txt\"); // This will throw an exception\n        } catch (EmptyFileException ex) {\n            // Catch the specific custom exception (EmptyFileException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } catch (IOException e) {\n            // Handle general IOException\n            System.out.println(\"IOException caught: \" + e.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (EmptyFileException) if the file is empty\n    private static void readFileAndCheckEmpty(String fileName) throws EmptyFileException, IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n            // Read the first line to check if the file is empty\n            String line = reader.readLine();\n            if (line == null) {\n                // If the first line is null, the file is empty, throw the custom exception\n                throw new EmptyFileException(\"File is empty: \" + fileName);\n            }\n\n            // Process the content of the file (dummy operation for demonstration)\n            System.out.println(\"File content: \" + line);\n        }\n    }\n}\n",
        "output": "IOException caught: nonEmptyFile.txt (The system cannot find the file specified)         Finally block executed      \n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program that reads a list of integers from the user and throws an exception if any numbers are duplicates",
        "code": "<span class='colorGreen'>// Write a Java program that reads a list of integers from the user and throws an exception if any numbers are duplicates</span>\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\n// Custom exception class for duplicate numbers\nclass DuplicateNumberException extends Exception {\n    public DuplicateNumberException(String message) {\n        super(message);\n    }\n}\n\npublic class program6 {\n    public static void main(String[] args) {\n        try {\n            // Test the method with user input\n            checkForDuplicates(getUserInput());\n        } catch (DuplicateNumberException ex) {\n            // Catch the specific custom exception (DuplicateNumberException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (DuplicateNumberException) if any numbers are duplicates\n    private static void checkForDuplicates(int[] numbers) throws DuplicateNumberException {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n\n        for (int number : numbers) {\n            if (!uniqueNumbers.add(number)) {\n                // If add returns false, it means the number is already in the set, throw the custom exception\n                throw new DuplicateNumberException(\"Duplicate number found: \" + number);\n            }\n        }\n    }\n\n    // A method to get a list of integers from the user\n    private static int[] getUserInput() {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the number of integers: \");\n        int count = scanner.nextInt();\n\n        int[] numbers = new int[count];\n        System.out.println(\"Enter the integers, one by one:\");\n\n        for (int i = 0; i < count; i++) {\n            System.out.print(\"Integer \" + (i + 1) + \": \");\n            numbers[i] = scanner.nextInt();\n        }\n\n        return numbers;\n    }\n}",
        "output": "Enter the number of integers: 3\nEnter the integers, one by one:\nInteger 1: 2\nInteger 2: 4\nInteger 3: -5\nFinally block executed\nProgram continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to create a method that takes a string as input and throws an exception if the string does not contain vowels.",
        "code": "<span class='colorGreen'>// Write a Java program to create a method that takes a string as input and throws an exception if the string does not contain vowels.</span>\nclass NoVowelsException extends Exception {\n    public NoVowelsException(String message) {\n        super(message);\n    }\n}\n\npublic class program7 {\n    public static void main(String[] args) {\n        try {\n            // Test the method with strings\n            checkForVowels(\"Hello\"); // This contains vowels, so no exception will be thrown\n            checkForVowels(\"Gym\");   // This does not contain vowels, so an exception will be thrown\n        } catch (NoVowelsException ex) {\n            // Catch the specific custom exception (NoVowelsException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (NoVowelsException) if the string does not contain vowels\n    private static void checkForVowels(String input) throws NoVowelsException {\n        if (!containsVowels(input)) {\n            // If the string does not contain vowels, throw the custom exception\n            throw new NoVowelsException(\"No vowels found in the string: \" + input);\n        }\n    }\n\n    // A helper method to check if a string contains vowels\n    private static boolean containsVowels(String input) {\n        return input.toLowerCase().matches(\".*[aeiou].*\");\n    }\n}\n",
        "output": "Exception caught: No vowels found in the string: Gym\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to connect the Java API to Database, if connection not successful then throw an exception",
        "code": "<span class='colorGreen'>// Write a Java program to connect the Java API to Database, if connection not successful then throw an exception</span>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n// Custom exception class for database connection failure\nclass DatabaseConnectionException extends Exception {\n    public DatabaseConnectionException(String message) {\n        super(message);\n    }\n}\n\npublic class program8 {\n    // JDBC URL, username, and password of MySQL server\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/your_database\";\n    private static final String USERNAME = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    public static void main(String[] args) {\n        try {\n            // Test the method to connect to the database\n            connectToDatabase();\n        } catch (DatabaseConnectionException ex) {\n            // Catch the specific custom exception (DatabaseConnectionException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (DatabaseConnectionException) if the database connection is not successful\n    private static void connectToDatabase() throws DatabaseConnectionException {\n        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {\n            // If the connection is successful, perform database operations here\n            System.out.println(\"Connected to the database!\");\n        } catch (SQLException e) {\n            // If an SQLException occurs, wrap it in a custom exception (DatabaseConnectionException)\n            throw new DatabaseConnectionException(\"Failed to connect to the database. Error: \" + e.getMessage());\n        }\n    }\n}",
        "output": "Exception caught: Failed to connect to the database. Error: No suitable driver found for jdbc:mysql://localhost:3306/your_database\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to manage the driver with path, username and password, if not successful then throw an exception",
        "code": "<span class='colorGreen'>// Write a Java program to manage the driver with path, username and password, if not successful then throw an exception</span>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n// Custom exception class for database connection failure\nclass DatabaseConnectionException extends Exception {\n    public DatabaseConnectionException(String message) {\n        super(message);\n    }\n}\n\npublic class DatabaseConnectionManager {\n    // JDBC URL, driver path, username, and password of MySQL server\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/your_database\";\n    private static final String DRIVER_PATH = \"com.mysql.cj.jdbc.Driver\";\n    private static final String USERNAME = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    public static void main(String[] args) {\n        try {\n            // Load the JDBC driver\n            Class.forName(DRIVER_PATH);\n            \n            // Test the method to connect to the database\n            connectToDatabase();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"Driver not found: \" + e.getMessage());\n        } catch (DatabaseConnectionException ex) {\n            // Catch the specific custom exception (DatabaseConnectionException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that throws a custom exception (DatabaseConnectionException) if the database connection is not successful\n    private static void connectToDatabase() throws DatabaseConnectionException {\n        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {\n            // If the connection is successful, perform database operations here\n            System.out.println(\"Connected to the database!\");\n        } catch (SQLException e) {\n            // If an SQLException occurs, wrap it in a custom exception (DatabaseConnectionException)\n            throw new DatabaseConnectionException(\"Failed to connect to the database. Error: \" + e.getMessage());\n        }\n    }\n}",
        "output": "Driver not found: com.mysql.cj.jdbc.Driver\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to throw the SQL Query, insert, delete, update, if not successful then throw an exception",
        "code": "<span class='colorGreen'>// Write a Java program to throw the SQL Query, insert, delete, update, if not successful then throw an exception</span>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n// Custom exception class for SQL query failure\nclass SqlQueryException extends Exception {\n    public SqlQueryException(String message) {\n        super(message);\n    }\n}\n\npublic class program10 {\n    // JDBC URL, driver path, username, and password of MySQL server\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/your_database\";\n    private static final String DRIVER_PATH = \"com.mysql.cj.jdbc.Driver\";\n    private static final String USERNAME = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    public static void main(String[] args) {\n        try {\n            // Load the JDBC driver\n            Class.forName(DRIVER_PATH);\n\n            // Test SQL queries\n            executeInsertQuery(\"INSERT INTO your_table(column1, column2) VALUES ('value1', 'value2')\");\n            executeUpdateQuery(\"UPDATE your_table SET column1 = 'new_value' WHERE column2 = 'value2'\");\n            executeDeleteQuery(\"DELETE FROM your_table WHERE column1 = 'new_value'\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"Driver not found: \" + e.getMessage());\n        } catch (SqlQueryException ex) {\n            // Catch the specific custom exception (SqlQueryException) and handle it\n            System.out.println(\"Exception caught: \" + ex.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method to execute an SQL insert query\n    private static void executeInsertQuery(String sqlQuery) throws SqlQueryException {\n        executeSqlQuery(sqlQuery, \"Insert operation\");\n    }\n\n    // A method to execute an SQL update query\n    private static void executeUpdateQuery(String sqlQuery) throws SqlQueryException {\n        executeSqlQuery(sqlQuery, \"Update operation\");\n    }\n\n    // A method to execute an SQL delete query\n    private static void executeDeleteQuery(String sqlQuery) throws SqlQueryException {\n        executeSqlQuery(sqlQuery, \"Delete operation\");\n    }\n\n    // A generic method to execute an SQL query\n    private static void executeSqlQuery(String sqlQuery, String operationType) throws SqlQueryException {\n        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);\n             Statement statement = connection.createStatement()) {\n            // Execute the SQL query\n            int result = statement.executeUpdate(sqlQuery);\n\n            // Check the result of the query\n            if (result > 0) {\n                System.out.println(operationType + \" successful\");\n            } else {\n                // If the result is not as expected, throw the custom exception\n                throw new SqlQueryException(operationType + \" failed. No rows affected.\");\n            }\n        } catch (SQLException e) {\n            // If an SQLException occurs, wrap it in a custom exception (SqlQueryException)\n            throw new SqlQueryException(operationType + \" failed. Error: \" + e.getMessage());\n        }\n    }\n}\n",
        "output": "Driver not found: com.mysql.cj.jdbc.Driver\n        Finally block executed\n        Program continues after exception handling"
    }, 
    {
        "programName": "Write a Java program to show an example of throws Keyword.",
        "code": "<span class='colorGreen'>// Write a Java program to show an example of throws Keyword.</span>\nimport java.io.IOException;\n\npublic class program11 {\n\n    public static void main(String[] args) {\n        try {\n            // Call a method that declares it may throw an IOException\n            performFileOperation();\n        } catch (IOException e) {\n            // Handle the IOException if it occurs\n            System.out.println(\"IOException caught: \" + e.getMessage());\n        }\n    }\n\n    // A method that declares it may throw an IOException using the throws keyword\n    private static void performFileOperation() throws IOException {\n        // Simulate a file operation that may throw an IOException\n        // For example, opening a file that doesn't exist\n        throw new IOException(\"File not found\");\n    }\n}",
        "output": "IOException caught: File not found"
    }, 
    {
        "programName": "Write a Java program to show an example of multiple catch",
        "code": "<span class='colorGreen'>// Write a Java program to show an example of multiple catch</span>\nimport java.io.IOException;\n\npublic class program12 {\n\n    public static void main(String[] args) {\n        try {\n            // Call a method that may throw either IOException or NullPointerException\n            performFileOperation();\n        } catch (IOException e) {\n            // Handle IOException\n            System.out.println(\"IOException caught: \" + e.getMessage());\n        } catch (NullPointerException e) {\n            // Handle NullPointerException\n            System.out.println(\"NullPointerException caught: \" + e.getMessage());\n        } catch (Exception e) {\n            // Handle any other exceptions (this catch block should come after specific catch blocks)\n            System.out.println(\"General Exception caught: \" + e.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n    }\n\n    // A method that may throw either IOException or NullPointerException\n    private static void performFileOperation() throws IOException {\n        // Simulate a file operation that may throw an IOException or a NullPointerException\n        // For example, opening a file that doesn't exist or accessing a null reference\n        boolean simulateIOException = true;\n\n        if (simulateIOException) {\n            throw new IOException(\"File not found\");\n        } else {\n            throw new NullPointerException(\"Null reference accessed\");\n        }\n    }\n}",
        "output": "IOException caught: File not found\n        Finally block executed"
    }, 
    {
        "programName": "Write a Java program to show an example of nested try block.",
        "code": "<span class='colorGreen'>// Write a Java program to show an example of nested try block.</span>\npublic class program13 {\n\n    public static void main(String[] args) {\n        try {\n            // Outer try block\n            System.out.println(\"Outer try block - Start\");\n\n            try {\n                // Inner try block 1\n                System.out.println(\"Inner try block 1 - Start\");\n                int result = divide(10, 0); // This may throw an ArithmeticException\n                System.out.println(\"Result of division: \" + result);\n                System.out.println(\"Inner try block 1 - End\");\n            } catch (ArithmeticException e) {\n                // Handle ArithmeticException from the inner try block 1\n                System.out.println(\"ArithmeticException caught in Inner try block 1: \" + e.getMessage());\n            }\n\n            try {\n                // Inner try block 2\n                System.out.println(\"Inner try block 2 - Start\");\n                int[] array = new int[5];\n                int value = array[10]; // This may throw an ArrayIndexOutOfBoundsException\n                System.out.println(\"Value at index 10: \" + value);\n                System.out.println(\"Inner try block 2 - End\");\n            } catch (ArrayIndexOutOfBoundsException e) {\n                // Handle ArrayIndexOutOfBoundsException from the inner try block 2\n                System.out.println(\"ArrayIndexOutOfBoundsException caught in Inner try block 2: \" + e.getMessage());\n            }\n\n            System.out.println(\"Outer try block - End\");\n        } catch (Exception e) {\n            // Handle any remaining exceptions in the outer try block\n            System.out.println(\"Exception caught in Outer try block: \" + e.getMessage());\n        } finally {\n            // Code inside the finally block will be executed regardless of whether an exception occurs or not\n            System.out.println(\"Finally block executed\");\n        }\n\n        System.out.println(\"Program continues after exception handling\");\n    }\n\n    // A method that may throw an ArithmeticException\n    private static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}",
        "output": "Outer try block - Start\n        Inner try block 1 - Start\n        ArithmeticException caught in Inner try block 1: / by zero\n        Inner try block 2 - Start\n        ArrayIndexOutOfBoundsException caught in Inner try block 2: Index 10 out of bounds for length 5\n        Outer try block - End\n        Finally block executed\n        Program continues after exception handling"
    }
]