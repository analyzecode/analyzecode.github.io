[
    {
        "programName": "Create a simple AWT application that displays a button with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a button with FlowLayout manager.</span>\nimport java.awt.Button;\nimport java.awt.Frame;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the program class\n        program awtButtonExample = new program();\n\n        // Call the method to create and display the frame\n        awtButtonExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a button using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT Button Example\");\n\n        // Create a button\n        Button button = new Button(\"Click Me!\");\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the button to the frame\n        frame.add(button);\n\n        // Add an action listener to the button\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.out.println(\"Button clicked!\");\n            }\n        });\n\n        // Set the size of the frame\n        frame.setSize(300, 200);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program1.png'>"
    },
    {
        "programName": " Create a simple AWT application that displays a button with Custom Layout.",
        "code": "<span class='colorGreen'>//  Create a simple AWT application that displays a button with Custom Layout.</span>\nimport java.awt.Button;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the program class\n        program customLayoutExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a button using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a button\n        Button button = new Button(\"Click Me!\");\n\n        // Add the button to the frame using the custom layout manager\n        frame.add(button);\n\n        // Add an action listener to the button\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.out.println(\"Button clicked!\");\n            }\n        });\n\n        // Set the size of the frame\n        frame.setSize(300, 200);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends java.awt.Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, java.awt.Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(java.awt.Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(100, 50); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(30, 20); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            java.awt.Component component = parent.getComponent(0);\n            component.setBounds(50, 50, 200, 100);\n        }\n    }\n}",
        "output": "<img src='awtImages/program2.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays multiple buttons with BorderLayout manager (North, East, West, South, Center).",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays multiple buttons with BorderLayout manager (North, East, West, South, Center).</span>\nimport java.awt.BorderLayout;\nimport java.awt.Button;\nimport java.awt.Frame;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the program class\n        program borderLayoutExample = new program();\n\n        // Call the method to create and display the frame\n        borderLayoutExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with multiple buttons using BorderLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"BorderLayout Example\");\n\n        // Create buttons\n        Button northButton = new Button(\"North\");\n        Button eastButton = new Button(\"East\");\n        Button westButton = new Button(\"West\");\n        Button southButton = new Button(\"South\");\n        Button centerButton = new Button(\"Center\");\n\n        // Set layout manager to BorderLayout\n        frame.setLayout(new BorderLayout());\n\n        // Add buttons to the frame with specified positions\n        frame.add(northButton, BorderLayout.NORTH);\n        frame.add(eastButton, BorderLayout.EAST);\n        frame.add(westButton, BorderLayout.WEST);\n        frame.add(southButton, BorderLayout.SOUTH);\n        frame.add(centerButton, BorderLayout.CENTER);\n\n        // Set the size of the frame\n        frame.setSize(400, 300);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program3.png'>"
    },
    {
        "programName": " Create a simple AWT application that displays a TextField with FlowLayout manager.",
        "code": "<span class='colorGreen'>//  Create a simple AWT application that displays a TextField with FlowLayout manager.</span>\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.TextField;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the program class\n        program awtTextFieldExample = new program();\n\n        // Call the method to create and display the frame\n        awtTextFieldExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a TextField using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT TextField Example\");\n\n        // Create a TextField\n        TextField textField = new TextField(\"Type here\");\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the TextField to the frame\n        frame.add(textField);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program4.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a TextField with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a TextField with Custom Layout.</span>\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\n\npublic class CustomLayoutTextFieldExample {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutTextFieldExample class\n        CustomLayoutTextFieldExample customLayoutTextFieldExample = new CustomLayoutTextFieldExample();\n\n        // Call the method to create and display the frame\n        customLayoutTextFieldExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a TextField using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a TextField\n        CustomLayoutTextField textField = new CustomLayoutTextField(\"Type here\");\n\n        // Add the TextField to the frame using the custom layout manager\n        frame.add(textField);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends java.awt.Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutTextField is a custom text field with a fixed size.\n     */\n    private class CustomLayoutTextField extends java.awt.TextField {\n        public CustomLayoutTextField(String text) {\n            super(text);\n            setPreferredSize(new Dimension(200, 30));\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(200, 30); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(150, 20); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            Component component = parent.getComponent(0);\n            component.setBounds(50, 25, 200, 30);\n        }\n    }\n}",
        "output": "<img src='awtImages/program5.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a Checkbox with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a Checkbox with FlowLayout manager.</span>\nimport java.awt.Checkbox;\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\n\npublic class AWTCheckboxExample {\n\n    public static void main(String[] args) {\n        // Create an instance of the AWTCheckboxExample class\n        AWTCheckboxExample awtCheckboxExample = new AWTCheckboxExample();\n\n        // Call the method to create and display the frame\n        awtCheckboxExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a Checkbox using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT Checkbox Example\");\n\n        // Create a Checkbox\n        Checkbox checkbox = new Checkbox(\"Check me\");\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the Checkbox to the frame\n        frame.add(checkbox);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program6.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a TextField with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a TextField with Custom Layout.</span>\nimport java.awt.Checkbox;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\npublic class program {\npublic static void main(String[] args) {\nprogram customLayoutCheckboxExample = new program();\n// Call the method to create and display the frame\ncustomLayoutCheckboxExample.createAndShowFrame();\n}\n/**\n* Creates and displays the frame with a Checkbox using a custom layout.\n*/\nprivate void createAndShowFrame() {\n// Create a frame\nCustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n// Create a Checkbox\nCustomLayoutCheckbox checkbox = new CustomLayoutCheckbox(\"Check me\");\n// Add the Checkbox to the frame using the custom layout manager\nframe.add(checkbox);\n// Set the size of the frame\nframe.setSize(300, 100);\n// Make the frame visible\nframe.setVisible(true);\n// Handle window closing event\nframe.addWindowListener(new java.awt.event.WindowAdapter() {\npublic void windowClosing(java.awt.event.WindowEvent windowEvent) {\nSystem.exit(0);\n}\n});\n}\n/**\n* CustomLayoutFrame is a frame that uses a custom layout manager.\n*/\nprivate class CustomLayoutFrame extends java.awt.Frame {\npublic CustomLayoutFrame(String title) {\nsuper(title);\nsetLayout(new CustomLayoutManager());\n}\n}\n/**\n* CustomLayoutCheckbox is a custom Checkbox with a fixed size.\n*/\nprivate class CustomLayoutCheckbox extends Checkbox {\npublic CustomLayoutCheckbox(String label) {\nsuper(label);\nsetPreferredSize(new Dimension(150, 30));\n}\n}\n/**\n* CustomLayoutManager is a simple custom layout manager.\n*/\nprivate class CustomLayoutManager implements LayoutManager {\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n// No implementation needed\n}\n@Override\npublic void removeLayoutComponent(Component comp) {\n// No implementation needed\n}\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(150, 30); // Set preferred size\n}\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(100, 20); // Set minimum size\n}\n@Override\npublic void layoutContainer(Container parent) {\n// Set the bounds of the component in the container\nComponent component = parent.getComponent(0);\ncomponent.setBounds(75, 35, 150, 30);\n}\n}\n}",
        "output": "<img src='awtImages/program7.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a Label with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a Label with FlowLayout manager.</span>\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.Label;\n\npublic class program {\n\npublic static void main(String[] args) {\n// Create an instance of the AWTLabelExample class\nprogram awtLabelExample = new program();\n// Call the method to create and display the frame\nawtLabelExample.createAndShowFrame();\n}\n/**     * Creates and displays the frame with a Label using FlowLayout.     */\nprivate void createAndShowFrame() {\n// Create a frame\nFrame frame = new Frame(\"AWT Label Example\");\n// Create a Label\nLabel label = new Label(\"Hello, AWT!\");\n// Set the layout manager to FlowLayout\nframe.setLayout(new FlowLayout());\n// Add the Label to the frame\nframe.add(label);\n// Set the size of the frame\nframe.setSize(300, 100);\n// Make the frame visible\nframe.setVisible(true);\n// Handle window closing event\nframe.addWindowListener(new java.awt.event.WindowAdapter() {\npublic void windowClosing(java.awt.event.WindowEvent windowEvent) {\nSystem.exit(0);\n}\n});\n}\n}\n\n",
        "output": "<img src='awtImages/program8.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a Label with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a Label with Custom Layout.</span>\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Label;\nimport java.awt.LayoutManager;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutLabelExample class\n        program customLayoutLabelExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutLabelExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a Label using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a Label\n        CustomLayoutLabel label = new CustomLayoutLabel(\"Hello, AWT!\");\n\n        // Add the Label to the frame using the custom layout manager\n        frame.add(label);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends java.awt.Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutLabel is a custom Label with a fixed size.\n     */\n    private class CustomLayoutLabel extends Label {\n        public CustomLayoutLabel(String text) {\n            super(text);\n            setPreferredSize(new Dimension(150, 30));\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(150, 30); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(100, 20); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            Component component = parent.getComponent(0);\n            component.setBounds(75, 35, 150, 30);\n        }\n    }\n}",
        "output": "<img src='awtImages/program9.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a Choice with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a Choice with FlowLayout manager.</span>\nimport java.awt.Choice;\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the AWTChoiceExample class\n        program awtChoiceExample = new program();\n\n        // Call the method to create and display the frame\n        awtChoiceExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a Choice using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT Choice Example\");\n\n        // Create a Choice\n        Choice choice = new Choice();\n        choice.add(\"Option 1\");\n        choice.add(\"Option 2\");\n        choice.add(\"Option 3\");\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the Choice to the frame\n        frame.add(choice);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program10.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a Choice with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a Choice with Custom Layout.</span>\nimport java.awt.Choice;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutChoiceExample class\n        program customLayoutChoiceExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutChoiceExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with a Choice using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a Choice\n        CustomLayoutChoice choice = new CustomLayoutChoice();\n        choice.add(\"Option 1\");\n        choice.add(\"Option 2\");\n        choice.add(\"Option 3\");\n\n        // Add the Choice to the frame using the custom layout manager\n        frame.add(choice);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends java.awt.Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutChoice is a custom Choice with a fixed size.\n     */\n    private class CustomLayoutChoice extends Choice {\n        public CustomLayoutChoice() {\n            super();\n            setPreferredSize(new Dimension(150, 30));\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(150, 30); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(100, 20); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            Component component = parent.getComponent(0);\n            component.setBounds(75, 35, 150, 30);\n        }\n    }\n}",
        "output": "<img src='awtImages/program11.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a CheckboxGroup with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a CheckboxGroup with FlowLayout manager.</span>\nimport java.awt.Checkbox;\nimport java.awt.CheckboxGroup;\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the AWTCheckboxGroupExample class\n        program awtCheckboxGroupExample = new program();\n\n        // Call the method to create and display the frame\n        awtCheckboxGroupExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with CheckboxGroup using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT CheckboxGroup Example\");\n\n        // Create a CheckboxGroup\n        CheckboxGroup checkboxGroup = new CheckboxGroup();\n\n        // Create Checkbox options\n        Checkbox checkbox1 = new Checkbox(\"Option 1\", checkboxGroup, false);\n        Checkbox checkbox2 = new Checkbox(\"Option 2\", checkboxGroup, false);\n        Checkbox checkbox3 = new Checkbox(\"Option 3\", checkboxGroup, false);\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the Checkboxes to the frame\n        frame.add(checkbox1);\n        frame.add(checkbox2);\n        frame.add(checkbox3);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program12.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a CheckboxGroup with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a CheckboxGroup with Custom Layout.</span>\nimport java.awt.Checkbox;\nimport java.awt.CheckboxGroup;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.LayoutManager;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutCheckboxGroupExample class\n        program customLayoutCheckboxGroupExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutCheckboxGroupExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with CheckboxGroup using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a CheckboxGroup\n        CheckboxGroup checkboxGroup = new CheckboxGroup();\n\n        // Create Checkbox options\n        Checkbox checkbox1 = new Checkbox(\"Option 1\", checkboxGroup, false);\n        Checkbox checkbox2 = new Checkbox(\"Option 2\", checkboxGroup, false);\n        Checkbox checkbox3 = new Checkbox(\"Option 3\", checkboxGroup, false);\n\n        // Add the Checkboxes to the frame using the custom layout manager\n        frame.add(checkbox1);\n        frame.add(checkbox2);\n        frame.add(checkbox3);\n\n        // Set the size of the frame\n        frame.setSize(300, 100);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends java.awt.Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        private int xOffset = 10;\n        private int yOffset = 10;\n\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(300, 100); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(100, 50); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the components in the container\n            for (Component component : parent.getComponents()) {\n                component.setBounds(xOffset, yOffset, 100, 20);\n                yOffset += 30; // Adjust vertical spacing\n            }\n        }\n    }\n}",
        "output": "<img src='awtImages/program13.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a List with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a List with FlowLayout manager.</span>\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.List;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the AWTListExample class\n        program awtListExample = new program();\n\n        // Call the method to create and display the frame\n        awtListExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with List using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT List Example\");\n\n        // Create a List\n        List list = new List();\n        list.add(\"Item 1\");\n        list.add(\"Item 2\");\n        list.add(\"Item 3\");\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the List to the frame\n        frame.add(list);\n\n        // Set the size of the frame\n        frame.setSize(300, 150);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}",
        "output": "<img src='awtImages/program14.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a List with Custom Layout.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a List with Custom Layout.</span>\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.LayoutManager;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutListExample class\n        program customLayoutListExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutListExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with List using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a List\n        CustomLayoutList list = new CustomLayoutList();\n        list.add(\"Item 1\");\n        list.add(\"Item 2\");\n        list.add(\"Item 3\");\n\n        // Add the List to the frame using the custom layout manager\n        frame.add(list);\n\n        // Set the size of the frame\n        frame.setSize(300, 150);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutList is a custom List with a fixed size.\n     */\n    private class CustomLayoutList extends java.awt.List {\n        public CustomLayoutList() {\n            super();\n            setPreferredSize(new Dimension(150, 100));\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(150, 100); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(100, 50); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            Component component = parent.getComponent(0);\n            component.setBounds(75, 25, 150, 100);\n        }\n    }\n}",
        "output": "<img src='awtImages/program15.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a TextArea with FlowLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application that displays a TextArea with FlowLayout manager.</span>\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.TextArea;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the AWTTextAreaFlowLayoutExample class\n        program awtTextAreaFlowLayoutExample = new program();\n\n        // Call the method to create and display the frame\n        awtTextAreaFlowLayoutExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with TextArea using FlowLayout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        Frame frame = new Frame(\"AWT TextArea Example\");\n\n        // Create a TextArea\n        TextArea textArea = new TextArea(\"This is a TextArea\", 5, 30);\n\n        // Set the layout manager to FlowLayout\n        frame.setLayout(new FlowLayout());\n\n        // Add the TextArea to the frame\n        frame.add(textArea);\n\n        // Set the size of the frame\n        frame.setSize(300, 150);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n}        ",
        "output": "<img src='awtImages/program16.png'>"
    },
    {
        "programName": "Create a simple AWT application that displays a TextArea with Custom Layout.",
        "code": "<span class='colorGreen'>// </span>\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.LayoutManager;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CustomLayoutTextAreaExample class\n        program customLayoutTextAreaExample = new program();\n\n        // Call the method to create and display the frame\n        customLayoutTextAreaExample.createAndShowFrame();\n    }\n\n    /**\n     * Creates and displays the frame with TextArea using a custom layout.\n     */\n    private void createAndShowFrame() {\n        // Create a frame\n        CustomLayoutFrame frame = new CustomLayoutFrame(\"Custom Layout Example\");\n\n        // Create a TextArea\n        CustomLayoutTextArea textArea = new CustomLayoutTextArea(\"This is a TextArea\", 5, 30);\n\n        // Add the TextArea to the frame using the custom layout manager\n        frame.add(textArea);\n\n        // Set the size of the frame\n        frame.setSize(300, 150);\n\n        // Make the frame visible\n        frame.setVisible(true);\n\n        // Handle window closing event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * CustomLayoutFrame is a frame that uses a custom layout manager.\n     */\n    private class CustomLayoutFrame extends Frame {\n        public CustomLayoutFrame(String title) {\n            super(title);\n            setLayout(new CustomLayoutManager());\n        }\n    }\n\n    /**\n     * CustomLayoutTextArea is a custom TextArea with a fixed size.\n     */\n    private class CustomLayoutTextArea extends java.awt.TextArea {\n        public CustomLayoutTextArea(String text, int rows, int columns) {\n            super(text, rows, columns);\n            setPreferredSize(new Dimension(200, 100));\n        }\n    }\n\n    /**\n     * CustomLayoutManager is a simple custom layout manager.\n     */\n    private class CustomLayoutManager implements LayoutManager {\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public void removeLayoutComponent(Component comp) {\n            // No implementation needed\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            return new Dimension(200, 100); // Set preferred size\n        }\n\n        @Override\n        public Dimension minimumLayoutSize(Container parent) {\n            return new Dimension(100, 50); // Set minimum size\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            // Set the bounds of the component in the container\n            Component component = parent.getComponent(0);\n            component.setBounds(50, 25, 200, 100);\n        }\n    }\n}",
        "output": "<img src='awtImages/program17.png'>"
    },
    {
        "programName": "Create a simple AWT application design a calculator that displays buttons, TextField with GridLayout manager.",
        "code": "<span class='colorGreen'>// Create a simple AWT application design a calculator that displays buttons, TextField with GridLayout manager.</span>\nimport java.awt.Button;\nimport java.awt.Frame;\nimport java.awt.GridLayout;\nimport java.awt.TextField;\n\npublic class program {\n\n    public static void main(String[] args) {\n        // Create an instance of the CalculatorAWT class\n        program calculatorAWT = new program();\n\n        // Call the method to create and display the calculator frame\n        calculatorAWT.createAndShowCalculator();\n    }\n\n    /**\n     * Creates and displays the calculator frame with buttons and TextField using GridLayout.\n     */\n    private void createAndShowCalculator() {\n        // Create a frame\n        Frame calculatorFrame = new Frame(\"Calculator\");\n\n        // Set the layout manager to GridLayout (4 rows, 4 columns)\n        calculatorFrame.setLayout(new GridLayout(4, 4, 10, 10));\n\n        // Create a TextField to display the input and result\n        TextField textField = new TextField();\n        textField.setEditable(false); // Make the TextField non-editable\n        calculatorFrame.add(textField);\n\n        // Create an array of button labels\n        String[] buttonLabels = {\n            \"7\", \"8\", \"9\", \"/\",\n            \"4\", \"5\", \"6\", \"*\",\n            \"1\", \"2\", \"3\", \"-\",\n            \"0\", \".\", \"=\", \"+\"\n        };\n\n        // Create buttons and add them to the frame\n        for (String label : buttonLabels) {\n            Button button = new Button(label);\n            button.addActionListener(new ButtonClickListener(textField, label));\n            calculatorFrame.add(button);\n        }\n\n        // Set the size of the frame\n        calculatorFrame.setSize(300, 400);\n\n        // Make the frame visible\n        calculatorFrame.setVisible(true);\n\n        // Handle window closing event\n        calculatorFrame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0);\n            }\n        });\n    }\n\n    /**\n     * ActionListener for the calculator buttons.\n     */\n    private static class ButtonClickListener implements java.awt.event.ActionListener {\n        private final TextField textField;\n        private final String buttonLabel;\n\n        public ButtonClickListener(TextField textField, String buttonLabel) {\n            this.textField = textField;\n            this.buttonLabel = buttonLabel;\n        }\n\n        @Override\n        public void actionPerformed(java.awt.event.ActionEvent e) {\n            // Update the TextField based on the button clicked\n            String currentText = textField.getText();\n            String newText = currentText + buttonLabel;\n            textField.setText(newText);\n\n            // If \"=\" is clicked, evaluate the expression and display the result\n            if (\"=\".equals(buttonLabel)) {\n                try {\n                    // Evaluate the expression using the JavaScript engine (eval method)\n                    javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager();\n                    javax.script.ScriptEngine engine = manager.getEngineByName(\"js\");\n                    Object result = engine.eval(currentText);\n\n                    // Display the result in the TextField\n                    textField.setText(result.toString());\n                } catch (Exception ex) {\n                    // Handle invalid expressions\n                    textField.setText(\"Error\");\n                }\n            }\n        }\n    }\n}z",
        "output": "<img src='awtImages/program18.png'>"
    }
    
]