[
    {
       
        "programName": "Write a Java program to create an interface Shape with the getArea() method. Create three classes Rectangle, Circle, and Triangle that implement the Shape interface. Implement the getArea() method for each of the three classes.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Shape with the getArea() method. Create three classes Rectangle, Circle, and Triangle that implement the Shape interface. Implement the getArea() method for each of the three classes.</span>\n// Shape interface\ninterface Shape {\n    double getArea();\n}\n\n// Rectangle class implementing Shape interface\nclass Rectangle implements Shape {\n    private double length;\n    private double width;\n\n    // Constructor\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    // Implementation of getArea() for Rectangle\n    @Override\n    public double getArea() {\n        return length * width;\n    }\n}\n\n// Circle class implementing Shape interface\nclass Circle implements Shape {\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Implementation of getArea() for Circle\n    @Override\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n\n// Triangle class implementing Shape interface\nclass Triangle implements Shape {\n    private double base;\n    private double height;\n\n    // Constructor\n    public Triangle(double base, double height) {\n        this.base = base;\n        this.height = height;\n    }\n\n    // Implementation of getArea() for Triangle\n    @Override\n    public double getArea() {\n        return 0.5 * base * height;\n    }\n}\n\n// Main class to test the implementations\npublic class ShapeTest {\n    public static void main(String[] args) {\n        // Creating objects of Rectangle, Circle, and Triangle\n        Rectangle rectangle = new Rectangle(5, 10);\n        Circle circle = new Circle(7);\n        Triangle triangle = new Triangle(8, 4);\n\n        // Calculating and displaying areas\n        System.out.println(\"Area of Rectangle: \" + rectangle.getArea());\n        System.out.println(\"Area of Circle: \" + circle.getArea());\n        System.out.println(\"Area of Triangle: \" + triangle.getArea());\n    }\n}",
        "output": "Area of Rectangle: 50.0\n        Area of Circle: 153.93804002589985\n        Area of Triangle: 16.0\n        "
    },
    {
       
        "programName": "Write a Java program to create a Animal interface with a method called bark() that takes no arguments and returns void. Create a Dog class that implements Animal and overrides speak() to print \"Dog is barking\".",
        "code": "<span class='colorGreen'>// Write a Java program to create a Animal interface with a method called bark() that takes no arguments and returns void. Create a Dog class that implements Animal and overrides speak() to print \"Dog is barking\".</span>\n// Animal interface\ninterface Animal {\n    void bark();\n}\n\n// Dog class implementing Animal interface\nclass Dog implements Animal {\n    // Implementation of bark() for Dog\n    @Override\n    public void bark() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\n// Main class to test the implementation\npublic class AnimalTest {\n    public static void main(String[] args) {\n        // Creating an object of Dog\n        Dog myDog = new Dog();\n\n        // Calling the bark method of Dog\n        myDog.bark();\n    }\n}        ",
        "output": "Dog is barking"
    },
    {
       
        "programName": "Write a Java program to create an interface Flyable with a method called fly_obj(). Create three classes Spacecraft, Airplane, and Helicopter that implement the Flyable interface. Implement the fly_obj() method for each of the three classes.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Flyable with a method called fly_obj(). Create three classes Spacecraft, Airplane, and Helicopter that implement the Flyable interface. Implement the fly_obj() method for each of the three classes.</span>\n// Flyable interface\ninterface Flyable {\n    void fly_obj();\n}\n\n// Spacecraft class implementing Flyable interface\nclass Spacecraft implements Flyable {\n    // Implementation of fly_obj() for Spacecraft\n    @Override\n    public void fly_obj() {\n        System.out.println(\"Spacecraft is flying in space\");\n    }\n}\n\n// Airplane class implementing Flyable interface\nclass Airplane implements Flyable {\n    // Implementation of fly_obj() for Airplane\n    @Override\n    public void fly_obj() {\n        System.out.println(\"Airplane is flying in the sky\");\n    }\n}\n\n// Helicopter class implementing Flyable interface\nclass Helicopter implements Flyable {\n    // Implementation of fly_obj() for Helicopter\n    @Override\n    public void fly_obj() {\n        System.out.println(\"Helicopter is flying in the air\");\n    }\n}\n\n// Main class to test the implementations\npublic class FlyableTest {\n    public static void main(String[] args) {\n        // Creating objects of Spacecraft, Airplane, and Helicopter\n        Spacecraft spacecraft = new Spacecraft();\n        Airplane airplane = new Airplane();\n        Helicopter helicopter = new Helicopter();\n\n        // Calling the fly_obj() method for each object\n        spacecraft.fly_obj();\n        airplane.fly_obj();\n        helicopter.fly_obj();\n    }\n}        ",
        "output": "Spacecraft is flying in space\n        Airplane is flying in the sky\n        Helicopter is flying in the air\n        "
    },
    {
       
        "programName": "Write a Java programming to create a banking system with three classes - Bank, Account, SavingsAccount, and CurrentAccount. The bank should have a list of accounts and methods for adding them. Accounts should be an interface with methods to deposit, withdraw, calculate interest, and view balances. SavingsAccount and CurrentAccount should implement the Account interface and have their own unique methods.",
        "code": "<span class='colorGreen'>// Write a Java programming to create a banking system with three classes - Bank, Account, SavingsAccount, and CurrentAccount. The bank should have a list of accounts and methods for adding them. Accounts should be an interface with methods to deposit, withdraw, calculate interest, and view balances. SavingsAccount and CurrentAccount should implement the Account interface and have their own unique methods.</span>\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Account interface\ninterface Account {\n    void deposit(double amount);\n    void withdraw(double amount);\n    double calculateInterest();\n    double getBalance();\n}\n\n// Bank class\nclass Bank {\n    private List<Account> accounts;\n\n    public Bank() {\n        this.accounts = new ArrayList<>();\n    }\n\n    public void addAccount(Account account) {\n        accounts.add(account);\n    }\n\n    public void displayAccounts() {\n        for (Account account : accounts) {\n            System.out.println(\"Balance in account: \" + account.getBalance());\n        }\n    }\n}\n\n// SavingsAccount class implementing Account interface\nclass SavingsAccount implements Account {\n    private double balance;\n    private double interestRate;\n\n    public SavingsAccount(double initialBalance, double interestRate) {\n        this.balance = initialBalance;\n        this.interestRate = interestRate;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    @Override\n    public double calculateInterest() {\n        return balance * interestRate;\n    }\n\n    @Override\n    public double getBalance() {\n        return balance;\n    }\n\n    // Additional method specific to SavingsAccount\n    public void applyInterest() {\n        double interest = calculateInterest();\n        deposit(interest);\n    }\n}\n\n// CurrentAccount class implementing Account interface\nclass CurrentAccount implements Account {\n    private double balance;\n    private double overdraftLimit;\n\n    public CurrentAccount(double initialBalance, double overdraftLimit) {\n        this.balance = initialBalance;\n        this.overdraftLimit = overdraftLimit;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        if (amount <= balance + overdraftLimit) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Exceeded overdraft limit.\");\n        }\n    }\n\n    @Override\n    public double calculateInterest() {\n        // Current accounts may not earn interest\n        return 0;\n    }\n\n    @Override\n    public double getBalance() {\n        return balance;\n    }\n\n    // Additional method specific to CurrentAccount\n    public void setOverdraftLimit(double newLimit) {\n        overdraftLimit = newLimit;\n    }\n}\n\n// Main class to test the banking system\npublic class BankingSystemTest {\n    public static void main(String[] args) {\n        // Create a bank\n        Bank myBank = new Bank();\n\n        // Create savings and current accounts\n        SavingsAccount savingsAccount = new SavingsAccount(1000, 0.05);\n        CurrentAccount currentAccount = new CurrentAccount(2000, 500);\n\n        // Add accounts to the bank\n        myBank.addAccount(savingsAccount);\n        myBank.addAccount(currentAccount);\n\n        // Deposit and withdraw money\n        savingsAccount.deposit(500);\n        currentAccount.withdraw(1000);\n\n        // Apply interest for savings account\n        ((SavingsAccount) savingsAccount).applyInterest();\n\n        // Display account balances\n        myBank.displayAccounts();\n    }\n}",
        "output": "Balance in account: 1500.0\n        Balance in account: 1000.0"
    },
    {
       
        "programName": "Write a Java program to create an interface Resizable with methods resizeWidth(int width) and resizeHeight(int height) that allow an object to be resized. Create a class Rectangle that implements the Resizable interface and implements the resize methods.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Resizable with methods resizeWidth(int width) and resizeHeight(int height) that allow an object to be resized. Create a class Rectangle that implements the Resizable interface and implements the resize methods.</span>\n// Resizable interface\ninterface Resizable {\n    void resizeWidth(int width);\n    void resizeHeight(int height);\n}\n\n// Rectangle class implementing Resizable interface\nclass Rectangle implements Resizable {\n    private int width;\n    private int height;\n\n    // Constructor\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Implementation of resizeWidth method\n    @Override\n    public void resizeWidth(int newWidth) {\n        if (newWidth > 0) {\n            this.width = newWidth;\n        } else {\n            System.out.println(\"Invalid width. Width must be greater than 0.\");\n        }\n    }\n\n    // Implementation of resizeHeight method\n    @Override\n    public void resizeHeight(int newHeight) {\n        if (newHeight > 0) {\n            this.height = newHeight;\n        } else {\n            System.out.println(\"Invalid height. Height must be greater than 0.\");\n        }\n    }\n\n    // Additional method to display the dimensions of the rectangle\n    public void displayDimensions() {\n        System.out.println(\"Rectangle Dimensions: Width = \" + width + \", Height = \" + height);\n    }\n}\n\n// Main class to test the implementation\npublic class ResizableTest {\n    public static void main(String[] args) {\n        // Create a rectangle\n        Rectangle myRectangle = new Rectangle(5, 10);\n\n        // Display initial dimensions\n        System.out.println(\"Initial Dimensions:\");\n        myRectangle.displayDimensions();\n\n        // Resize the rectangle\n        myRectangle.resizeWidth(8);\n        myRectangle.resizeHeight(12);\n\n        // Display resized dimensions\n        System.out.println(\"\nResized Dimensions:\");\n        myRectangle.displayDimensions();\n    }\n}",
        "output": "Initial Dimensions:\n        Rectangle Dimensions: Width = 5, Height = 10\n        \n        Resized Dimensions:\n        Rectangle Dimensions: Width = 8, Height = 12\n        "
    },
    {
       
        "programName": "Write a Java program to create an interface Drawable with a method draw() that takes no arguments and returns void. Create three classes Circle, Rectangle, and Triangle that implement the Drawable interface and override the draw() method to draw their respective shapes.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Drawable with a method draw() that takes no arguments and returns void. Create three classes Circle, Rectangle, and Triangle that implement the Drawable interface and override the draw() method to draw their respective shapes.</span>\n// Drawable interface\ninterface Drawable {\n    void draw();\n}\n\n// Circle class implementing Drawable interface\nclass Circle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a Circle\");\n        // Additional logic for drawing a circle\n    }\n}\n\n// Rectangle class implementing Drawable interface\nclass Rectangle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a Rectangle\");\n        // Additional logic for drawing a rectangle\n    }\n}\n\n// Triangle class implementing Drawable interface\nclass Triangle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a Triangle\");\n        // Additional logic for drawing a triangle\n    }\n}\n\n// Main class to test the implementations\npublic class DrawableTest {\n    public static void main(String[] args) {\n        // Create objects of Circle, Rectangle, and Triangle\n        Circle circle = new Circle();\n        Rectangle rectangle = new Rectangle();\n        Triangle triangle = new Triangle();\n\n        // Call the draw() method for each object\n        circle.draw();\n        rectangle.draw();\n        triangle.draw();\n    }\n}        ",
        "output": "Drawing a Circle\n        Drawing a Rectangle\n        Drawing a Triangle\n        "
    },
    {
       
        "programName": " Write a Java program to create an interface Sortable with a method sort() that sorts an array of integers in ascending order. Create two classes BubbleSort and SelectionSort that implement the Sortable interface and provide their own implementations of the sort() method.",
        "code": "<span class='colorGreen'>//  Write a Java program to create an interface Sortable with a method sort() that sorts an array of integers in ascending order. Create two classes BubbleSort and SelectionSort that implement the Sortable interface and provide their own implementations of the sort() method.</span>\n// Sortable interface\ninterface Sortable {\n    void sort(int[] array);\n}\n\n// BubbleSort class implementing Sortable interface\nclass BubbleSort implements Sortable {\n    @Override\n    public void sort(int[] array) {\n        int n = array.length;\n        boolean swapped;\n\n        do {\n            swapped = false;\n\n            for (int i = 1; i < n; i++) {\n                if (array[i - 1] > array[i]) {\n                    // Swap elements if they are in the wrong order\n                    int temp = array[i - 1];\n                    array[i - 1] = array[i];\n                    array[i] = temp;\n                    swapped = true;\n                }\n            }\n\n            // After each pass, the largest element is guaranteed to be at the end,\n            // so we can reduce the range of the array to sort\n            n--;\n        } while (swapped);\n    }\n}\n\n// SelectionSort class implementing Sortable interface\nclass SelectionSort implements Sortable {\n    @Override\n    public void sort(int[] array) {\n        int n = array.length;\n\n        for (int i = 0; i < n - 1; i++) {\n            int minIndex = i;\n\n            // Find the index of the minimum element in the unsorted part of the array\n            for (int j = i + 1; j < n; j++) {\n                if (array[j] < array[minIndex]) {\n                    minIndex = j;\n                }\n            }\n\n            // Swap the found minimum element with the first element\n            int temp = array[minIndex];\n            array[minIndex] = array[i];\n            array[i] = temp;\n        }\n    }\n}\n\n// Main class to test the implementations\npublic class SortableTest {\n    public static void main(String[] args) {\n        // Create an array of integers\n        int[] array = {5, 2, 8, 1, 3};\n\n        // Create objects of BubbleSort and SelectionSort\n        BubbleSort bubbleSort = new BubbleSort();\n        SelectionSort selectionSort = new SelectionSort();\n\n        // Display the original array\n        System.out.println(\"Original Array: \" + arrayToString(array));\n\n        // Sort the array using BubbleSort\n        bubbleSort.sort(array);\n        System.out.println(\"Sorted Array (BubbleSort): \" + arrayToString(array));\n\n        // Restore the original array\n        array = new int[]{5, 2, 8, 1, 3};\n\n        // Sort the array using SelectionSort\n        selectionSort.sort(array);\n        System.out.println(\"Sorted Array (SelectionSort): \" + arrayToString(array));\n    }\n\n    // Helper method to convert an array to a string\n    private static String arrayToString(int[] array) {\n        StringBuilder result = new StringBuilder(\"[\");\n        for (int i = 0; i < array.length; i++) {\n            result.append(array[i]);\n            if (i < array.length - 1) {\n                result.append(\", \");\n            }\n        }\n        result.append(\"]\");\n        return result.toString();\n    }\n}",
        "output": "Original Array: [5, 2, 8, 1, 3]\n        Sorted Array (BubbleSort): [1, 2, 3, 5, 8]\n        Sorted Array (SelectionSort): [1, 2, 3, 5, 8]"
    },
    {
       
        "programName": "Write a Java program to create an interface Playable with a method play() that takes no arguments and returns void. Create three classes Football, Volleyball, and Basketball that implement the Playable interface and override the play() method to play the respective sports.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Playable with a method play() that takes no arguments and returns void. Create three classes Football, Volleyball, and Basketball that implement the Playable interface and override the play() method to play the respective sports.</span>\n// Playable interface\ninterface Playable {\n    void play();\n}\n\n// Football class implementing Playable interface\nclass Football implements Playable {\n    @Override\n    public void play() {\n        System.out.println(\"Playing Football\");\n        // Additional logic for playing football\n    }\n}\n\n// Volleyball class implementing Playable interface\nclass Volleyball implements Playable {\n    @Override\n    public void play() {\n        System.out.println(\"Playing Volleyball\");\n        // Additional logic for playing volleyball\n    }\n}\n\n// Basketball class implementing Playable interface\nclass Basketball implements Playable {\n    @Override\n    public void play() {\n        System.out.println(\"Playing Basketball\");\n        // Additional logic for playing basketball\n    }\n}\n\n// Main class to test the implementations\npublic class PlayableTest {\n    public static void main(String[] args) {\n        // Create objects of Football, Volleyball, and Basketball\n        Football football = new Football();\n        Volleyball volleyball = new Volleyball();\n        Basketball basketball = new Basketball();\n\n        // Call the play() method for each object\n        football.play();\n        volleyball.play();\n        basketball.play();\n    }\n}        ",
        "output": "Playing Football\n        Playing Volleyball\n        Playing Basketball"
    },
    {
       
        "programName": "Write a Java program to create an interface Searchable with a method search(String keyword) that searches for a given keyword in a text document. Create two classes Document and WebPage that implement the Searchable interface and provide their own implementations of the search() method.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Searchable with a method search(String keyword) that searches for a given keyword in a text document. Create two classes Document and WebPage that implement the Searchable interface and provide their own implementations of the search() method.</span>\n// Searchable interface\ninterface Searchable {\n    void search(String keyword);\n}\n\n// Document class implementing Searchable interface\nclass Document implements Searchable {\n    private String content;\n\n    // Constructor\n    public Document(String content) {\n        this.content = content;\n    }\n\n    @Override\n    public void search(String keyword) {\n        if (content.contains(keyword)) {\n            System.out.println(\"Keyword '\" + keyword + \"' found in the document.\");\n        } else {\n            System.out.println(\"Keyword '\" + keyword + \"' not found in the document.\");\n        }\n    }\n}\n\n// WebPage class implementing Searchable interface\nclass WebPage implements Searchable {\n    private String url;\n    private String pageContent;\n\n    // Constructor\n    public WebPage(String url, String pageContent) {\n        this.url = url;\n        this.pageContent = pageContent;\n    }\n\n    @Override\n    public void search(String keyword) {\n        if (pageContent.contains(keyword)) {\n            System.out.println(\"Keyword '\" + keyword + \"' found on the web page \" + url);\n        } else {\n            System.out.println(\"Keyword '\" + keyword + \"' not found on the web page \" + url);\n        }\n    }\n}\n\n// Main class to test the implementations\npublic class SearchableTest {\n    public static void main(String[] args) {\n        // Create a Document and a WebPage\n        Document document = new Document(\"This is a sample document for searching.\");\n        WebPage webPage = new WebPage(\"https://example.com\", \"Welcome to the example.com website. Happy searching!\");\n\n        // Search for keywords in Document and WebPage\n        document.search(\"sample\");\n        document.search(\"Java\");\n\n        webPage.search(\"example\");\n        webPage.search(\"programming\");\n    }\n}",
        "output": "Keyword 'sample' found in the document.\n        Keyword 'Java' not found in the document.\n        Keyword 'example' found on the web page https://example.com\n        Keyword 'programming' not found on the web page https://example.com\n        "
    },
    {
       
        "programName": "Write a Java program to create an interface Encryptable with methods encrypt (String data) and decrypt (String encryptedData) that define encryption and decryption operations. Create two classes AES and RSA that implement the Encryptable interface and provide their own encryption and decryption algorithms.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Encryptable with methods encrypt (String data) and decrypt (String encryptedData) that define encryption and decryption operations. Create two classes AES and RSA that implement the Encryptable interface and provide their own encryption and decryption algorithms.</span>\n// Encryptable interface\ninterface Encryptable {\n    String encrypt(String data);\n    String decrypt(String encryptedData);\n}\n\n// AES class implementing Encryptable interface\nclass AES implements Encryptable {\n    @Override\n    public String encrypt(String data) {\n        // Replace this with your AES encryption logic\n        return \"AES Encrypted: \" + data;\n    }\n\n    @Override\n    public String decrypt(String encryptedData) {\n        // Replace this with your AES decryption logic\n        return \"AES Decrypted: \" + encryptedData;\n    }\n}\n\n// RSA class implementing Encryptable interface\nclass RSA implements Encryptable {\n    @Override\n    public String encrypt(String data) {\n        // Replace this with your RSA encryption logic\n        return \"RSA Encrypted: \" + data;\n    }\n\n    @Override\n    public String decrypt(String encryptedData) {\n        // Replace this with your RSA decryption logic\n        return \"RSA Decrypted: \" + encryptedData;\n    }\n}\n\n// Main class to test the implementations\npublic class EncryptionTest {\n    public static void main(String[] args) {\n        // Create objects of AES and RSA\n        AES aes = new AES();\n        RSA rsa = new RSA();\n\n        // Test encryption and decryption\n        String originalData = \"Hello, this is a secret message.\";\n\n        String aesEncrypted = aes.encrypt(originalData);\n        String aesDecrypted = aes.decrypt(aesEncrypted);\n\n        String rsaEncrypted = rsa.encrypt(originalData);\n        String rsaDecrypted = rsa.decrypt(rsaEncrypted);\n\n        // Display results\n        System.out.println(\"Original Data: \" + originalData);\n        System.out.println(\"AES Encrypted: \" + aesEncrypted);\n        System.out.println(\"AES Decrypted: \" + aesDecrypted);\n        System.out.println(\"RSA Encrypted: \" + rsaEncrypted);\n        System.out.println(\"RSA Decrypted: \" + rsaDecrypted);\n    }\n}",
        "output": "Original Data: Hello, this is a secret message.\n        AES Encrypted: AES Encrypted: Hello, this is a secret message.\n        AES Decrypted: AES Decrypted: AES Encrypted: Hello, this is a secret message.\n        RSA Encrypted: RSA Encrypted: Hello, this is a secret message.\n        RSA Decrypted: RSA Decrypted: RSA Encrypted: Hello, this is a secret message.\n        "
    },
    {
       
        "programName": "Write a Java program to create an interface Sortable with a method sort (int[] array) that sorts an array of integers in descending order. Create two classes QuickSort and MergeSort that implement the Sortable interface and provide their own implementations of the sort() method.",
        "code": "<span class='colorGreen'>// Write a Java program to create an interface Sortable with a method sort (int[] array) that sorts an array of integers in descending order. Create two classes QuickSort and MergeSort that implement the Sortable interface and provide their own implementations of the sort() method.</span>\n// Sortable interface\ninterface Sortable {\n    void sort(int[] array);\n}\n\n// QuickSort class implementing Sortable interface\nclass QuickSort implements Sortable {\n    @Override\n    public void sort(int[] array) {\n        quickSort(array, 0, array.length - 1);\n    }\n\n    private void quickSort(int[] array, int low, int high) {\n        if (low < high) {\n            int partitionIndex = partition(array, low, high);\n\n            quickSort(array, low, partitionIndex - 1);\n            quickSort(array, partitionIndex + 1, high);\n        }\n    }\n\n    private int partition(int[] array, int low, int high) {\n        int pivot = array[high];\n        int i = low - 1;\n\n        for (int j = low; j < high; j++) {\n            if (array[j] >= pivot) {\n                i++;\n\n                int temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n\n        int temp = array[i + 1];\n        array[i + 1] = array[high];\n        array[high] = temp;\n\n        return i + 1;\n    }\n}\n\n// MergeSort class implementing Sortable interface\nclass MergeSort implements Sortable {\n    @Override\n    public void sort(int[] array) {\n        mergeSort(array, 0, array.length - 1);\n    }\n\n    private void mergeSort(int[] array, int left, int right) {\n        if (left < right) {\n            int mid = left + (right - left) / 2;\n\n            mergeSort(array, left, mid);\n            mergeSort(array, mid + 1, right);\n\n            merge(array, left, mid, right);\n        }\n    }\n\n    private void merge(int[] array, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        int[] leftArray = new int[n1];\n        int[] rightArray = new int[n2];\n\n        for (int i = 0; i < n1; i++) {\n            leftArray[i] = array[left + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            rightArray[j] = array[mid + 1 + j];\n        }\n\n        int i = 0, j = 0, k = left;\n\n        while (i < n1 && j < n2) {\n            if (leftArray[i] >= rightArray[j]) {\n                array[k] = leftArray[i];\n                i++;\n            } else {\n                array[k] = rightArray[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i < n1) {\n            array[k] = leftArray[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            array[k] = rightArray[j];\n            j++;\n            k++;\n        }\n    }\n}\n\n// Main class to test the implementations\npublic class SortableTest {\n    public static void main(String[] args) {\n        // Create objects of QuickSort and MergeSort\n        QuickSort quickSort = new QuickSort();\n        MergeSort mergeSort = new MergeSort();\n\n        // Test sorting in descending order\n        int[] array = {5, 2, 8, 1, 3};\n\n        // Display original array\n        System.out.println(\"Original Array: \" + arrayToString(array));\n\n        // Sort the array using QuickSort\n        quickSort.sort(array);\n        System.out.println(\"Sorted Array (QuickSort): \" + arrayToString(array));\n\n        // Restore the original array\n        array = new int[]{5, 2, 8, 1, 3};\n\n        // Sort the array using MergeSort\n        mergeSort.sort(array);\n        System.out.println(\"Sorted Array (MergeSort): \" + arrayToString(array));\n    }\n\n    // Helper method to convert an array to a string\n    private static String arrayToString(int[] array) {\n        StringBuilder result = new StringBuilder(\"[\");\n        for (int i = 0; i < array.length; i++) {\n            result.append(array[i]);\n            if (i < array.length - 1) {\n                result.append(\", \");\n            }\n        }\n        result.append(\"]\");\n        return result.toString();\n    }\n}",
        "output": "Original Array: [5, 2, 8, 1, 3]\n        Sorted Array (QuickSort): [8, 5, 3, 2, 1]\n        Sorted Array (MergeSort): [8, 5, 3, 2, 1]"
    }
]