[

{
    "programName": "Write a Java program to create a basic Java thread that prints \"Hello, World!\" when execute",
    "code": "<span class='colorGreen'>// Write a Java program to create a basic Java thread that prints \"Hello, World!\" when executed.</span>\nclass sampleThread extends Thread{\n    public void run(){\n        System.out.println(\"hello world\");\n    }\n}\n\n\n\npublic class Multithreading_1{\n  public static void main(String[] args) {\n    sampleThread foo = new sampleThread();\n    foo.run();\n    \n  }\n}",
    "output": "<img src='multithreadImages/1.png'>"
},
{
    "programName": "Write a Java program that sorts an array of integers using multiple threads.",
    "code": "<span class='colorGreen'>//Write a Java program that sorts an array of integers using multiple threads.</span>\nimport java.util.Arrays;\n\nclass ParallelMergeSort {\n\n    private final int[] array;\n\n    private ParallelMergeSort(int[] array) {\n        this.array = array;\n    }\n\n    private void merge(int low, int mid, int high) {\n        int[] left = Arrays.copyOfRange(array, low, mid + 1);\n        int[] right = Arrays.copyOfRange(array, mid + 1, high + 1);\n\n        int i = 0, j = 0, k = low;\n\n        while (i < left.length && j < right.length) {\n            if (left[i] <= right[j]) {\n                array[k++] = left[i++];\n            } else {\n                array[k++] = right[j++];\n            }\n        }\n\n        while (i < left.length) {\n            array[k++] = left[i++];\n        }\n\n        while (j < right.length) {\n            array[k++] = right[j++];\n        }\n    }\n\n    private void mergeSort(int low, int high) {\n        if (low < high) {\n            int mid = (low + high) / 2;\n\n            Thread leftThread = new Thread(() -> mergeSort(low, mid));\n            Thread rightThread = new Thread(() -> mergeSort(mid + 1, high));\n\n            leftThread.start();\n            rightThread.start();\n\n            try {\n                leftThread.join();\n                rightThread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n            merge(low, mid, high);\n        }\n    }\n\n    private static void parallelMergeSort(int[] array) {\n        ParallelMergeSort sorter = new ParallelMergeSort(array);\n        sorter.mergeSort(0, array.length - 1);\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 4, 7, 3, 9, 5, 2, 1, 6, 11, 8, 10};\n\n        System.out.println(\"Array before sorting: \" + Arrays.toString(arr));\n        \n        parallelMergeSort(arr);\n\n        System.out.println(\"Array after sorting: \" + Arrays.toString(arr));\n    }\n}",
    "output": "<img src='multithreadImages/3.png'>"
},
{
    "programName": "Write a Java program that performs matrix multiplication using multiple threads.",
    "code": "<span class='colorGreen'>//Write a Java program that performs matrix multiplication using multiple threads.    </span>\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class MatrixMultiplication {\n\n    private static final int MATRIX_SIZE = 3; \n    private static final int NUM_THREADS = 3; \n\n    private static int[][] resultMatrix = new int[MATRIX_SIZE][MATRIX_SIZE];\n    private static int[][] matrixA = new int[MATRIX_SIZE][MATRIX_SIZE];\n    private static int[][] matrixB = new int[MATRIX_SIZE][MATRIX_SIZE];\n\n    public static void main(String[] args) {\n        initializeMatrix(matrixA);\n        initializeMatrix(matrixB);\n\n        System.out.println(\"Matrix A:\");\n        printMatrix(matrixA);\n\n        System.out.println(\"\nMatrix B:\");\n        printMatrix(matrixB);\n\n        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);\n\n        for (int i = 0; i < MATRIX_SIZE; i++) {\n            executor.execute(new MatrixMultiplier(i));\n        }\n\n        executor.shutdown();\n\n        try {\n            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"\nResult Matrix:\");\n        printMatrix(resultMatrix);\n    }\n\n    private static void initializeMatrix(int[][] matrix) {\n        for (int i = 0; i < MATRIX_SIZE; i++) {\n            for (int j = 0; j < MATRIX_SIZE; j++) {\n                matrix[i][j] = (int) (Math.random() * 10);\n            }\n        }\n    }\n\n    private static void printMatrix(int[][] matrix) {\n        for (int i = 0; i < MATRIX_SIZE; i++) {\n            for (int j = 0; j < MATRIX_SIZE; j++) {\n                System.out.print(matrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    private static class MatrixMultiplier implements Runnable {\n        private final int row;\n\n        public MatrixMultiplier(int row) {\n            this.row = row;\n        }\n\n        @Override\n        public void run() {\n            for (int col = 0; col < MATRIX_SIZE; col++) {\n                for (int k = 0; k < MATRIX_SIZE; k++) {\n                    resultMatrix[row][col] += matrixA[row][k] * matrixB[k][col];\n                }\n            }\n        }\n    }\n}",
    "output": "<img src='multithreadImages/4.png'>"
},
{
    "programName": "Write a Java program that calculates the sum of all prime numbers up to a given limit using multiple threads.",
    "code": "<span class='colorGreen'>// Write a Java program that calculates the sum of all prime numbers up to a given limit using multiple threads.</span>\nclass MyThread extends Thread {\n    private int start, end;\n    private int sum = 0;\n\n    MyThread(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    public void run() {\n        System.out.println(\"My thread is running\");\n        for (int i = start; i <= end; i++) {\n            if (isPrime(i))\n                sum += i;\n        }\n    }\n\n    boolean isPrime(int n) {\n        if (n == 0 || n == 1)\n            return false;\n        for (int i = 2; i <= Math.sqrt(n); ++i) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public int getSum() {\n        return sum;\n    }\n}\n\nclass SumOfPrimes {\n    MyThread[] myThreads;\n    private int sum = 0;\n    private int limit = 20;\n    private static int threadCount = 4;\n\n    // Constructor to initialize the array of threads\n    public SumOfPrimes(int n) throws InterruptedException {\n        this.myThreads = new MyThread[n];\n        for (int i = 0; i < n; i++) {\n            int start = ((limit * i) / n);\n            int end = (i == n-1) ? limit : ((limit * (i+1))/n) - 1;\n            myThreads[i] = new MyThread(start, end);\n        }\n    }\n\n    // Function to start all threads\n    public void startAll() throws InterruptedException {\n        for (int i = 0; i < myThreads.length; i++) {\n            myThreads[i].start();\n            myThreads[i].join();\n        }\n    }\n\n    public void getSum() {\n        for (int i = 0; i < myThreads.length; i++) {\n            this.sum += myThreads[i].getSum();\n        }\n    }\n    \n    public static void main(String[] args) {\n        try {\n            SumOfPrimes mt = new SumOfPrimes(threadCount);\n            mt.startAll();\n            mt.getSum();\n            System.out.println(\"Sum of prime numbers is \" + mt.sum);\n        } catch (InterruptedException e) {\n            System.err.print(\"Error: \" + e);\n        }\n    }\n}",
    "output": "<img src='multithreadImages/5.png'>"
},

{
    "programName": "Create the program to create multiple threads by using Runnbale interface",
    "code": "<span class='colorGreen'>// Create the program to create multiple threads by using Runnbale interface    </span>\nclass prog8 {\n    \n    public static void main(String[] args) throws java.lang.ClassNotFoundException {\n\n        Runnable r1 = new MyRun(\"This is Thread 1\");\n        Runnable r2 = new MyRun(\"This isThread 2\");\n        Runnable r3 = new MyRun(\"This isThread 3\");\n\n        Thread t1 = new Thread(r1);\n        Thread t2 = new Thread(r2);\n        Thread t3 = new Thread(r3);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n\n    @Override\n    public String toString() {\n        return \"prog1 []\";\n    }\n}\n\nclass MyRun implements Runnable {\n    private String tn;\n\n    public MyRun(String name) {\n        this.tn = name;\n    }\n\n    @Override\n    public void run() {\n        for (int i = 1; i <= 5; i++) {\n            System.out.println(tn + \" - Count is start: \" + i);\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        System.out.println(tn + \" now running  has finished.\");\n    }\n}    ",
    "output": "<img src='multithreadImages/8.png'>"
},
{
    "programName": " Create the program to create multiple threads, set its name and its priority.",
    "code": "<span class='colorGreen'>//  Create the program to create multiple threads, set its name and its priority.</span>\nclass MyThread extends Thread {\n    public MyThread(String name, int priority) {\n        super(name);\n        setPriority(priority);\n    }\n\n    public void run() {\n        System.out.println(\"Thread: \" + getName() + \", Priority: \" + getPriority() + \" is running.\");\n    }\n}\n\npublic class ThreadExample {\n    public static void main(String[] args) {\n        MyThread thread1 = new MyThread(\"Thread1\", Thread.MAX_PRIORITY);\n        MyThread thread2 = new MyThread(\"Thread2\", Thread.NORM_PRIORITY);\n        MyThread thread3 = new MyThread(\"Thread3\", Thread.MIN_PRIORITY);\n\n        thread1.start();\n        thread2.start();\n        thread3.start();\n    }\n}    ",
    "output": "<img src='multithreadImages/10.png'>"
}

]