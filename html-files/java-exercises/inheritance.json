[
    {
       
            "programName": "Write a Java program to create a class called Animal with a method called makeSound(). Create a subclass called Cat that overrides the makeSound() method to bark.",
            "code": "<span class='colorGreen'>// Write a Java program to create a class called Animal with a method called makeSound(). Create a subclass called Cat that overrides the makeSound() method to bark.</span>\n// Animal class\nclass Animal {\n    // Method to make a generic animal sound\n    public void makeSound() {\n        System.out.println(\"Some generic animal sound\");\n    }\n}\n\n// Cat class, a subclass of Animal\nclass Cat extends Animal {\n    // Override the makeSound method to make a cat bark\n    @Override\n    public void makeSound() {\n        System.out.println(\"Meow (Cat's sound)\");\n    }\n}\n\n// Main class to test the Animal and Cat classes\npublic class AnimalTest {\n    public static void main(String[] args) {\n        // Create an instance of Animal\n        Animal genericAnimal = new Animal();\n\n        // Call makeSound on the generic animal\n        genericAnimal.makeSound();\n\n        // Create an instance of Cat\n        Cat myCat = new Cat();\n\n        // Call makeSound on the cat (it will bark, as overridden in the Cat class)\n        myCat.makeSound();\n    }\n}            ",
            "output": "Some generic animal sound\n            Meow (Cat's sound)"
    },
    {
       
        "programName": "Write a Java program to create a class called Vehicle with a method called drive(). Create a subclass called Car that overrides the drive() method to print \"Repairing a car\"",
        "code": "<span class='colorGreen'>// Write a Java program to create a class called Vehicle with a method called drive(). Create a subclass called Car that overrides the drive() method to print \"Repairing a car\"</span>\n// Vehicle class\nclass Vehicle {\n    // Method to drive the vehicle\n    public void drive() {\n        System.out.println(\"Driving a vehicle\");\n    }\n}\n\n// Car class, a subclass of Vehicle\nclass Car extends Vehicle {\n    // Override the drive method to print \"Repairing a car\"\n    @Override\n    public void drive() {\n        System.out.println(\"Repairing a car\");\n    }\n}\n\n// Main class to test the Vehicle and Car classes\npublic class VehicleTest {\n    public static void main(String[] args) {\n        // Create an instance of Vehicle\n        Vehicle myVehicle = new Vehicle();\n\n        // Call drive on the generic vehicle\n        myVehicle.drive();\n\n        // Create an instance of Car\n        Car myCar = new Car();\n\n        // Call drive on the car (it will print \"Repairing a car\")\n        myCar.drive();\n    }\n}        ",
        "output": "Driving a vehicle\n        Repairing a car        "
    },
    {
       
        "programName": "Write a Java program to create a class called Shape with a method called getArea(). Create a subclass called Rectangle that overrides the getArea() method to calculate the area of a rectangle.",
        "code": "<span class='colorGreen'>// Write a Java program to create a class called Shape with a method called getArea(). Create a subclass called Rectangle that overrides the getArea() method to calculate the area of a rectangle.</span>\n// Shape class\nclass Shape {\n    // Method to get the area (generic implementation)\n    public double getArea() {\n        return 0.0; // Default implementation for a generic shape\n    }\n}\n\n// Rectangle class, a subclass of Shape\nclass Rectangle extends Shape {\n    // Attributes of a rectangle\n    private double length;\n    private double width;\n\n    // Constructor for Rectangle\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    // Override the getArea method to calculate the area of a rectangle\n    @Override\n    public double getArea() {\n        return length * width; // Area of a rectangle: length * width\n    }\n}\n\n// Main class to test the Shape and Rectangle classes\npublic class ShapeTest {\n    public static void main(String[] args) {\n        // Create an instance of Shape (generic shape)\n        Shape genericShape = new Shape();\n\n        // Call getArea on the generic shape (will return 0.0)\n        System.out.println(\"Area of generic shape: \" + genericShape.getArea());\n\n        // Create an instance of Rectangle\n        Rectangle myRectangle = new Rectangle(5.0, 3.0);\n\n        // Call getArea on the rectangle (will calculate the area)\n        System.out.println(\"Area of rectangle: \" + myRectangle.getArea());\n    }\n}        ",
        "output": "Area of generic shape: 0.0\n        Area of rectangle: 15.0"
    },
    {
       
        "programName": "Write a Java program to create a class called Employee with methods called work() and getSalary(). Create a subclass called HRManager that overrides the work() method and adds a new method called addEmployee().",
        "code": "<span class='colorGreen'>// Write a Java program to create a class called Employee with methods called work() and getSalary(). Create a subclass called HRManager that overrides the work() method and adds a new method called addEmployee().</span>\n// Employee class\nclass Employee {\n    // Method to perform the work\n    public void work() {\n        System.out.println(\"Employee is working\");\n    }\n\n    // Method to get the salary (generic implementation)\n    public double getSalary() {\n        return 0.0; // Default implementation for a generic employee\n    }\n}\n\n// HRManager class, a subclass of Employee\nclass HRManager extends Employee {\n    // Override the work method for HRManager\n    @Override\n    public void work() {\n        System.out.println(\"HR Manager is managing human resources\");\n    }\n\n    // New method for HRManager to add an employee\n    public void addEmployee() {\n        System.out.println(\"HR Manager is adding a new employee\");\n    }\n}\n\n// Main class to test the Employee and HRManager classes\npublic class EmployeeTest {\n    public static void main(String[] args) {\n        // Create an instance of Employee\n        Employee genericEmployee = new Employee();\n\n        // Call work and getSalary on the generic employee\n        genericEmployee.work();\n        System.out.println(\"Salary of generic employee: \" + genericEmployee.getSalary());\n\n        // Create an instance of HRManager\n        HRManager hrManager = new HRManager();\n\n        // Call work, getSalary, and addEmployee on the HR manager\n        hrManager.work();\n        System.out.println(\"Salary of HR Manager: \" + hrManager.getSalary());\n        hrManager.addEmployee();\n    }\n}        ",
        "output": "Employee is working\n        Salary of generic employee: 0.0\n        HR Manager is managing human resources\n        Salary of HR Manager: 0.0\n        HR Manager is adding a new employee\n       "
    },
    {
       
        "programName": "Write a Java program to create a class known as \"BankAccount\" with methods called deposit() and withdraw(). Create a subclass called SavingsAccount that overrides the withdraw() method to prevent withdrawals if the account balance falls below one hundred.",
        "code": "<span class='colorGreen'>// Write a Java program to create a class known as \"BankAccount\" with methods called deposit() and withdraw(). Create a subclass called SavingsAccount that overrides the withdraw() method to prevent withdrawals if the account balance falls below one hundred.</span>\n// BankAccount class\nclass BankAccount {\n    // Attributes\n    protected double balance;\n\n    // Constructor\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    // Method to deposit money into the account\n    public void deposit(double amount) {\n        balance += amount;\n        System.out.println(\"Deposit: \" + amount);\n        displayBalance();\n    }\n\n    // Method to withdraw money from the account\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n            System.out.println(\"Withdrawal: \" + amount);\n        } else {\n            System.out.println(\"Insufficient funds. Withdrawal not allowed.\");\n        }\n        displayBalance();\n    }\n\n    // Method to display the current balance\n    public void displayBalance() {\n        System.out.println(\"Current Balance: \" + balance);\n    }\n}\n\n// SavingsAccount class, a subclass of BankAccount\nclass SavingsAccount extends BankAccount {\n    // Constructor\n    public SavingsAccount(double initialBalance) {\n        super(initialBalance);\n    }\n\n    // Override the withdraw method to prevent withdrawals if balance falls below 100\n    @Override\n    public void withdraw(double amount) {\n        if (balance - amount >= 100) {\n            super.withdraw(amount);\n        } else {\n            System.out.println(\"Withdrawal not allowed. Minimum balance requirement not met.\");\n            displayBalance();\n        }\n    }\n}\n\n// Main class to test the BankAccount and SavingsAccount classes\npublic class AccountTest {\n    public static void main(String[] args) {\n        // Create an instance of SavingsAccount\n        SavingsAccount savingsAccount = new SavingsAccount(500);\n\n        // Call deposit and withdraw on the savings account\n        savingsAccount.deposit(200);\n        savingsAccount.withdraw(50);\n        savingsAccount.withdraw(400);\n    }\n}",
        "output": "Deposit: 200.0\n        Current Balance: 700.0\n        Withdrawal: 50.0\n        Current Balance: 650.0\n        Withdrawal not allowed. Minimum balance requirement not met.\n        Current Balance: 650.0\n        "
    },
    {
       
        "programName": "Write a Java program to create a class called Animal with a method named move(). Create a subclass called Cheetah that overrides the move() method to run.",
        "code": "<span class='colorGreen'>// Write a Java program to create a class called Animal with a method named move(). Create a subclass called Cheetah that overrides the move() method to run.</span>\n// Animal class\nclass Animal {\n    // Method to move (generic implementation)\n    public void move() {\n        System.out.println(\"Animal is moving\");\n    }\n}\n\n// Cheetah class, a subclass of Animal\nclass Cheetah extends Animal {\n    // Override the move method for Cheetah\n    @Override\n    public void move() {\n        System.out.println(\"Cheetah is running\");\n    }\n}\n\n// Main class to test the Animal and Cheetah classes\npublic class AnimalTest {\n    public static void main(String[] args) {\n        // Create an instance of Animal\n        Animal genericAnimal = new Animal();\n\n        // Call move on the generic animal\n        genericAnimal.move();\n\n        // Create an instance of Cheetah\n        Cheetah myCheetah = new Cheetah();\n\n        // Call move on the cheetah (it will run, as overridden in the Cheetah class)\n        myCheetah.move();\n    }\n}        ",
        "output": "Animal is moving\n        Cheetah is running        "
    },
    {
       
        "programName": "Write a Java program to create a class known as Person with methods called getFirstName() and getLastName(). Create a subclass called Employee that adds a new method named getEmployeeId() and overrides the getLastName() method to include the employee's job title",
        "code": "<span class='colorGreen'>// Write a Java program to create a class known as Person with methods called getFirstName() and getLastName(). Create a subclass called Employee that adds a new method named getEmployeeId() and overrides the getLastName() method to include the employee's job title</span>\n// Person class\nclass Person {\n    // Attributes\n    private String firstName;\n    private String lastName;\n\n    // Constructor\n    public Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    // Method to get the first name\n    public String getFirstName() {\n        return firstName;\n    }\n\n    // Method to get the last name\n    public String getLastName() {\n        return lastName;\n    }\n}\n\n// Employee class, a subclass of Person\nclass Employee extends Person {\n    // Attributes\n    private String jobTitle;\n    private int employeeId;\n\n    // Constructor for Employee\n    public Employee(String firstName, String lastName, String jobTitle, int employeeId) {\n        super(firstName, lastName);\n        this.jobTitle = jobTitle;\n        this.employeeId = employeeId;\n    }\n\n    // Method to get the employee ID\n    public int getEmployeeId() {\n        return employeeId;\n    }\n\n    // Override the getLastName method to include the employee's job title\n    @Override\n    public String getLastName() {\n        return super.getLastName() + \", \" + jobTitle;\n    }\n}\n\n// Main class to test the Person and Employee classes\npublic class PersonTest {\n    public static void main(String[] args) {\n        // Create an instance of Person\n        Person person = new Person(\"John\", \"Doe\");\n\n        // Call getFirstName and getLastName on the person\n        System.out.println(\"First Name: \" + person.getFirstName());\n        System.out.println(\"Last Name: \" + person.getLastName());\n\n        // Create an instance of Employee\n        Employee employee = new Employee(\"Jane\", \"Smith\", \"Software Engineer\", 1001);\n\n        // Call getFirstName, getLastName, and getEmployeeId on the employee\n        System.out.println(\"First Name: \" + employee.getFirstName());\n        System.out.println(\"Last Name with Job Title: \" + employee.getLastName());\n        System.out.println(\"Employee ID: \" + employee.getEmployeeId());\n    }\n}",
        "output": "First Name: John\n        Last Name: Doe\n        First Name: Jane\n        Last Name with Job Title: Smith, Software Engineer\n        Employee ID: 1001\n        "
    },
    {
       
        "programName": "Write a Java program to create a class called Shape with methods called getPerimeter() and getArea(). Create a subclass called Circle that overrides the getPerimeter() and getArea() methods to calculate the area and perimeter of a circle.",
        "code": "<span class='colorGreen'>// Write a Java program to create a class called Shape with methods called getPerimeter() and getArea(). Create a subclass called Circle that overrides the getPerimeter() and getArea() methods to calculate the area and perimeter of a circle.</span>\n// Shape class\nclass Shape {\n    // Methods to get perimeter and area (generic implementations)\n    public double getPerimeter() {\n        return 0.0; // Default implementation for a generic shape\n    }\n\n    public double getArea() {\n        return 0.0; // Default implementation for a generic shape\n    }\n}\n\n// Circle class, a subclass of Shape\nclass Circle extends Shape {\n    // Attribute of a circle\n    private double radius;\n\n    // Constructor for Circle\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Override the getPerimeter method to calculate the perimeter of a circle\n    @Override\n    public double getPerimeter() {\n        return 2 * Math.PI * radius; // Perimeter of a circle: 2 * π * radius\n    }\n\n    // Override the getArea method to calculate the area of a circle\n    @Override\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2); // Area of a circle: π * radius^2\n    }\n}\n\n// Main class to test the Shape and Circle classes\npublic class ShapeTest {\n    public static void main(String[] args) {\n        // Create an instance of Circle\n        Circle myCircle = new Circle(5.0);\n\n        // Call getPerimeter and getArea on the circle\n        System.out.println(\"Perimeter of circle: \" + myCircle.getPerimeter());\n        System.out.println(\"Area of circle: \" + myCircle.getArea());\n    }\n}        ",
        "output": "Perimeter of circle: 31.41592653589793\n        Area of circle: 78.53981633974483        "
    },
    {
       
        "programName": "Write a Java program to create a vehicle class hierarchy. The base class should be Vehicle, with subclasses Truck, Car and Motorcycle. Each subclass should have properties such as make, model, year, and fuel type. Implement methods for calculating fuel efficiency, distance traveled, and maximum speed.",
        "code": "<span class='colorGreen'>// Write a Java program to create a vehicle class hierarchy. The base class should be Vehicle, with subclasses Truck, Car and Motorcycle. Each subclass should have properties such as make, model, year, and fuel type. Implement methods for calculating fuel efficiency, distance traveled, and maximum speed.</span>\n// Vehicle class\nclass Vehicle {\n    // Attributes\n    protected String make;\n    protected String model;\n    protected int year;\n    protected String fuelType;\n\n    // Constructor\n    public Vehicle(String make, String model, int year, String fuelType) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.fuelType = fuelType;\n    }\n\n    // Method to calculate fuel efficiency (generic implementation)\n    public double calculateFuelEfficiency() {\n        return 0.0; // Default implementation for a generic vehicle\n    }\n\n    // Method to calculate distance traveled (generic implementation)\n    public double calculateDistanceTraveled() {\n        return 0.0; // Default implementation for a generic vehicle\n    }\n\n    // Method to get maximum speed (generic implementation)\n    public int getMaximumSpeed() {\n        return 0; // Default implementation for a generic vehicle\n    }\n}\n\n// Truck class, a subclass of Vehicle\nclass Truck extends Vehicle {\n    // Constructor for Truck\n    public Truck(String make, String model, int year, String fuelType) {\n        super(make, model, year, fuelType);\n    }\n\n    // Override methods for specific calculations for a Truck\n    @Override\n    public double calculateFuelEfficiency() {\n        // Implement the calculation specific to a Truck\n        return 8.5; // Example value for fuel efficiency in miles per gallon\n    }\n\n    @Override\n    public double calculateDistanceTraveled() {\n        // Implement the calculation specific to a Truck\n        return 250.0; // Example value for distance traveled in miles\n    }\n\n    @Override\n    public int getMaximumSpeed() {\n        // Implement the calculation specific to a Truck\n        return 70; // Example value for maximum speed in miles per hour\n    }\n}\n\n// Car class, a subclass of Vehicle\nclass Car extends Vehicle {\n    // Constructor for Car\n    public Car(String make, String model, int year, String fuelType) {\n        super(make, model, year, fuelType);\n    }\n\n    // Override methods for specific calculations for a Car\n    @Override\n    public double calculateFuelEfficiency() {\n        // Implement the calculation specific to a Car\n        return 30.0; // Example value for fuel efficiency in miles per gallon\n    }\n\n    @Override\n    public double calculateDistanceTraveled() {\n        // Implement the calculation specific to a Car\n        return 300.0; // Example value for distance traveled in miles\n    }\n\n    @Override\n    public int getMaximumSpeed() {\n        // Implement the calculation specific to a Car\n        return 120; // Example value for maximum speed in miles per hour\n    }\n}\n\n// Motorcycle class, a subclass of Vehicle\nclass Motorcycle extends Vehicle {\n    // Constructor for Motorcycle\n    public Motorcycle(String make, String model, int year, String fuelType) {\n        super(make, model, year, fuelType);\n    }\n\n    // Override methods for specific calculations for a Motorcycle\n    @Override\n    public double calculateFuelEfficiency() {\n        // Implement the calculation specific to a Motorcycle\n        return 50.0; // Example value for fuel efficiency in miles per gallon\n    }\n\n    @Override\n    public double calculateDistanceTraveled() {\n        // Implement the calculation specific to a Motorcycle\n        return 150.0; // Example value for distance traveled in miles\n    }\n\n    @Override\n    public int getMaximumSpeed() {\n        // Implement the calculation specific to a Motorcycle\n        return 150; // Example value for maximum speed in miles per hour\n    }\n}\n\n// Main class to test the Vehicle, Truck, Car, and Motorcycle classes\npublic class VehicleTest {\n    public static void main(String[] args) {\n        // Create instances of each vehicle type\n        Truck myTruck = new Truck(\"Ford\", \"F-150\", 2022, \"Gasoline\");\n        Car myCar = new Car(\"Toyota\", \"Camry\", 2022, \"Hybrid\");\n        Motorcycle myMotorcycle = new Motorcycle(\"Harley-Davidson\", \"Sportster\", 2022, \"Gasoline\");\n\n        // Display information and calculations for each vehicle type\n        displayVehicleInfo(myTruck);\n        displayVehicleInfo(myCar);\n        displayVehicleInfo(myMotorcycle);\n    }\n\n    // Method to display information and calculations for a vehicle\n    public static void displayVehicleInfo(Vehicle vehicle) {\n        System.out.println(\"Make: \" + vehicle.make);\n        System.out.println(\"Model: \" + vehicle.model);\n        System.out.println(\"Year: \" + vehicle.year);\n        System.out.println(\"Fuel Type: \" + vehicle.fuelType);\n        System.out.println(\"Fuel Efficiency: \" + vehicle.calculateFuelEfficiency() + \" miles per gallon\");\n        System.out.println(\"Distance Traveled: \" + vehicle.calculateDistanceTraveled() + \" miles\");\n        System.out.println(\"Maximum Speed: \" + vehicle.getMaximumSpeed() + \" miles per hour\");\n        System.out.println(\"----------------------------------\");\n    }\n}",
        "output": "Make: Ford\n        Model: F-150\n        Year: 2022\n        Fuel Type: Gasoline\n        Fuel Efficiency: 8.5 miles per gallon\n        Distance Traveled: 250.0 miles\n        Maximum Speed: 70 miles per hour\n        ----------------------------------\n        Make: Toyota\n        Model: Camry\n        Year: 2022\n        Fuel Type: Hybrid\n        Fuel Efficiency: 30.0 miles per gallon\n        Distance Traveled: 300.0 miles\n        Maximum Speed: 120 miles per hour\n        ----------------------------------\n        Make: Harley-Davidson\n        Model: Sportster\n        Year: 2022\n        Fuel Type: Gasoline\n        Fuel Efficiency: 50.0 miles per gallon\n        Distance Traveled: 150.0 miles\n        "
    },
    {
       
        "programName": "Write a Java program that creates a class hierarchy for employees of a company. The base class should be Employee, with subclasses Manager, Developer, and Programmer. Each subclass should have properties such as name, address, salary, and job title. Implement methods for calculating bonuses, generating performance reports, and managing projects.",
        "code": "<span class='colorGreen'>// Write a Java program that creates a class hierarchy for employees of a company. The base class should be Employee, with subclasses Manager, Developer, and Programmer. Each subclass should have properties such as name, address, salary, and job title. Implement methods for calculating bonuses, generating performance reports, and managing projects.</span>\nclass Employee {\n    private String name;\n    private String address;\n    private double salary;\n    private String jobTitle;\n\n    public Employee(String name, String address, double salary, String jobTitle) {\n        this.name = name;\n        this.address = address;\n        this.salary = salary;\n        this.jobTitle = jobTitle;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public String getJobTitle() {\n        return jobTitle;\n    }\n\n    public double calculateBonus() {\n        // Default implementation for bonus calculation\n        return salary * 0.05;\n    }\n\n    public String generatePerformanceReport() {\n        // Default implementation for performance report\n        return \"Performance report for \" + name + \": Good\";\n    }\n}\n\nclass Manager extends Employee {\n    private String department;\n\n    public Manager(String name, String address, double salary, String jobTitle, String department) {\n        super(name, address, salary, jobTitle);\n        this.department = department;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    @Override\n    public double calculateBonus() {\n        // Override bonus calculation for managers\n        return getSalary() * 0.1;\n    }\n\n    public void manageProject() {\n        System.out.println(\"Manager \" + getName() + \" is managing a project.\");\n    }\n}\n\nclass Developer extends Employee {\n    private String programmingLanguage;\n\n    public Developer(String name, String address, double salary, String jobTitle, String programmingLanguage) {\n        super(name, address, salary, jobTitle);\n        this.programmingLanguage = programmingLanguage;\n    }\n\n    public String getProgrammingLanguage() {\n        return programmingLanguage;\n    }\n\n    @Override\n    public double calculateBonus() {\n        // Override bonus calculation for developers\n        return getSalary() * 0.08;\n    }\n\n    public void writeCode() {\n        System.out.println(\"Developer \" + getName() + \" is writing code in \" + programmingLanguage + \".\");\n    }\n}\n\nclass Programmer extends Developer {\n    public Programmer(String name, String address, double salary, String programmingLanguage) {\n        super(name, address, salary, \"Programmer\", programmingLanguage);\n    }\n\n    @Override\n    public double calculateBonus() {\n        // Override bonus calculation for programmers\n        return getSalary() * 0.07;\n    }\n}\n\npublic class Company {\n    public static void main(String[] args) {\n        // Example usage\n        Manager manager = new Manager(\"John Doe\", \"123 Main St\", 80000, \"Manager\", \"IT\");\n        Developer developer = new Developer(\"Jane Smith\", \"456 Oak St\", 60000, \"Developer\", \"Java\");\n        Programmer programmer = new Programmer(\"Bob Johnson\", \"789 Pine St\", 70000, \"C++\");\n\n        System.out.println(manager.generatePerformanceReport());\n        System.out.println(\"Bonus for \" + manager.getName() + \": $\" + manager.calculateBonus());\n        manager.manageProject();\n\n        System.out.println(developer.generatePerformanceReport());\n        System.out.println(\"Bonus for \" + developer.getName() + \": $\" + developer.calculateBonus());\n        developer.writeCode();\n\n        System.out.println(programmer.generatePerformanceReport());\n        System.out.println(\"Bonus for \" + programmer.getName() + \": $\" + programmer.calculateBonus());\n        programmer.writeCode();\n    }\n}",
        "output": "Performance report for John Doe: Good\n        Bonus for John Doe: $8000.0\n        Manager John Doe is managing a project.      \n        Performance report for Jane Smith: Good      \n        Bonus for Jane Smith: $4800.0\n        Developer Jane Smith is writing code in Java.\n        Performance report for Bob Johnson: Good     \n        Bonus for Bob Johnson: $4900.000000000001    \n        Developer Bob Johnson is writing code in C++."
    },
    {
       
        "programName": "Create a program, showing an example of super keyword",
        "code": "<span class='colorGreen'>// Create a program, showing an example of super keyword</span>\nclass Animal {\n    String color = \"White\";\n\n    void eat() {\n        System.out.println(\"Animal is eating...\");\n    }\n}\n\nclass Dog extends Animal {\n    String color = \"Black\";\n\n    void displayColor() {\n        // Using super to access the color variable of the immediate parent class (Animal)\n        System.out.println(\"Dog color: \" + color);\n        System.out.println(\"Animal color: \" + super.color);\n    }\n\n    void bark() {\n        System.out.println(\"Dog is barking...\");\n    }\n\n    // Overriding the eat() method of the parent class\n    @Override\n    void eat() {\n        super.eat(); // Calling the eat() method of the immediate parent class (Animal)\n        System.out.println(\"Dog is eating...\");\n    }\n}\n\npublic class SuperKeywordExample {\n    public static void main(String[] args) {\n        Dog myDog = new Dog();\n\n        // Demonstrate accessing variables and methods using super\n        myDog.displayColor();\n\n        // Demonstrate method overriding and calling the parent class method using super\n        myDog.eat();\n    }\n}        ",
        "output": "Dog color: Black\n        Animal color: White\n        Animal is eating...\n        Dog is eating...\n        "
    },
    {
       
        "programName": "Create a program, showing an example of super function",
        "code": "<span class='colorGreen'>// Create a program, showing an example of super function</span>\nclass Animal {\n    String color;\n\n    // Constructor for Animal class\n    Animal(String color) {\n        this.color = color;\n    }\n\n    void eat() {\n        System.out.println(\"Animal is eating...\");\n    }\n}\n\nclass Dog extends Animal {\n    String breed;\n\n    // Constructor for Dog class\n    Dog(String color, String breed) {\n        // Call the constructor of the immediate parent class (Animal)\n        super(color);\n        this.breed = breed;\n    }\n\n    void bark() {\n        System.out.println(\"Dog is barking...\");\n    }\n\n    void displayInfo() {\n        System.out.println(\"Color: \" + color);\n        System.out.println(\"Breed: \" + breed);\n    }\n}\n\npublic class SuperConstructorExample {\n    public static void main(String[] args) {\n        // Create a Dog object\n        Dog myDog = new Dog(\"Brown\", \"Labrador\");\n\n        // Call methods of the Dog class\n        myDog.displayInfo();\n        myDog.eat(); // Inherited from Animal class\n        myDog.bark();\n    }\n}        ",
        "output": "Color: Brown\n        Breed: Labrador\n        Animal is eating...\n        Dog is barking...\n        "
    },
    {
       
        "programName": "Create a program, showing an example of method overriding",
        "code": "<span class='colorGreen'>// Create a program, showing an example of method overriding</span>\nclass Animal {\n    void makeSound() {\n        System.out.println(\"Animal makes a sound\");\n    }\n}\n\nclass Dog extends Animal {\n    // Override the makeSound method of the Animal class\n    @Override\n    void makeSound() {\n        System.out.println(\"Dog barks\");\n    }\n\n    // Additional method specific to the Dog class\n    void wagTail() {\n        System.out.println(\"Dog wags its tail\");\n    }\n}\n\nclass Cat extends Animal {\n    // Override the makeSound method of the Animal class\n    @Override\n    void makeSound() {\n        System.out.println(\"Cat meows\");\n    }\n\n    // Additional method specific to the Cat class\n    void purr() {\n        System.out.println(\"Cat purrs\");\n    }\n}\n\npublic class MethodOverrideExample {\n    public static void main(String[] args) {\n        Animal genericAnimal = new Animal();\n        Dog myDog = new Dog();\n        Cat myCat = new Cat();\n\n        // Demonstrate method overriding\n        genericAnimal.makeSound(); // Output: Animal makes a sound\n\n        // The actual object type determines which overridden method is called\n        myDog.makeSound(); // Output: Dog barks\n        myCat.makeSound(); // Output: Cat meows\n\n        // Demonstrate additional methods in subclasses\n        myDog.wagTail(); // Output: Dog wags its tail\n        myCat.purr();    // Output: Cat purrs\n    }\n}        ",
        "output": "Animal makes a sound\n        Dog barks\n        Cat meows\n        Dog wags its tail\n        Cat purrs"
    },
    {
       
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": ""
    },
    {
       
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": ""
    },
    {
       
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": ""
    },
    {
       
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": ""
    }
]