[
    {
        "programName": "Java Program to Display Some Text in the Frame using Labels",
        "code": "<span class='colorGreen'>// Java Program to Display Some Text in the Frame using Labels</span>\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.Color;\nimport java.awt.FlowLayout;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program1 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Text in Frame Example\");\n\n        // Create a label with the desired text\n        Label label = new Label(\"Hello, this is some text!\");\n\n        // Set layout manager to FlowLayout for automatic positioning\n        frame.setLayout(new FlowLayout());\n\n        // Add a background color to the label for better visibility\n        label.setBackground(Color.LIGHT_GRAY);\n        label.setForeground(Color.BLACK);\n\n        // Add the label to the frame\n        frame.add(label);\n\n        // Set frame properties\n        frame.setSize(400, 200); // Increased width and height\n        frame.setVisible(true);  // Make the frame visible\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program1.png'>"
    }, 
    {
        "programName": "Java Program to Create Text Area and Password Field",
        "code": "<span class='colorGreen'>// Java Program to Create Text Area and Password Field</span>\nimport java.awt.Frame;\nimport java.awt.TextArea;\nimport java.awt.TextField;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program2 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Text Area and Password Field Example\");\n\n        // Create a TextArea\n        TextArea textArea = new TextArea(\"This is a TextArea\", 5, 30);\n\n        // Create a PasswordField\n        TextField passwordField = new TextField(\"Password\", 20);\n        passwordField.setEchoChar('*'); // Set echo character for the password field\n\n        // Set the positions of components within the frame\n        textArea.setBounds(20, 40, 350, 100);\n        passwordField.setBounds(20, 160, 150, 20);\n\n        // Add components to the frame\n        frame.add(textArea);\n        frame.add(passwordField);\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(400, 250);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program2.png'>"
    }, 
    {
        "programName": "Java Program to Create a Button and Display Image in the Frame when Clicked",
        "code": "<span class='colorGreen'>// Java Program to Create a Button and Display Image in the Frame when Clicked</span>\nimport java.awt.Button;\nimport java.awt.Canvas;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\n\npublic class program3 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Button and Image Example\");\n\n        // Create a button\n        Button button = new Button(\"Click me\");\n\n        // Create a canvas to display the image\n        ImageCanvas imageCanvas = new ImageCanvas();\n\n        // Add components to the frame\n        frame.add(button);\n        frame.add(imageCanvas);\n\n        // Set the positions of components within the frame\n        button.setBounds(20, 40, 80, 30);\n        imageCanvas.setBounds(120, 40, 200, 150);\n\n        // Add action listener to the button\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Load the image and set it for the canvas when the button is clicked\n                BufferedImage image = loadImage(\"Frame 2.jpg\");\n                imageCanvas.setImage(image);\n            }\n        });\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(400, 250);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n\n    // Load an image from file\n    private static BufferedImage loadImage(String filePath) {\n        try {\n            return ImageIO.read(new File(filePath));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n\n// Custom Canvas class to display images\nclass ImageCanvas extends Canvas {\n    private Image image;\n\n    public void setImage(Image image) {\n        this.image = image;\n        repaint(); // Trigger repaint to update the displayed image\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        super.paint(g);\n        if (image != null) {\n            g.drawImage(image, 0, 0, getWidth(), getHeight(), this);\n        }\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program3.png'>"
    }, 
    {
        "programName": "Java Program to Create 2 Radio Buttons and Display Selected Button Label",
        "code": "<span class='colorGreen'>// Java Program to Create 2 Radio Buttons and Display Selected Button Label</span>\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.Checkbox;\nimport java.awt.CheckboxGroup;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program4 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Radio Button Example\");\n\n        // Create a label to display the selected button label\n        Label resultLabel = new Label(\"Selected Button: \");\n\n        // Create a CheckboxGroup to group the radio buttons\n        CheckboxGroup checkboxGroup = new CheckboxGroup();\n\n        // Create the first radio button\n        Checkbox radioButton1 = new Checkbox(\"Option 1\", checkboxGroup, false);\n\n        // Create the second radio button\n        Checkbox radioButton2 = new Checkbox(\"Option 2\", checkboxGroup, false);\n\n        // Add components to the frame\n        frame.add(resultLabel);\n        frame.add(radioButton1);\n        frame.add(radioButton2);\n\n        // Set the positions of components within the frame\n        resultLabel.setBounds(20, 40, 200, 30);\n        radioButton1.setBounds(20, 80, 100, 30);\n        radioButton2.setBounds(20, 120, 100, 30);\n\n        // Add item listener to the radio buttons\n        ItemListener itemListener = new ItemListener() {\n            @Override\n            public void itemStateChanged(ItemEvent e) {\n                Checkbox selectedCheckbox = checkboxGroup.getSelectedCheckbox();\n                resultLabel.setText(\"Selected Button: \" + selectedCheckbox.getLabel());\n            }\n        };\n\n        radioButton1.addItemListener(itemListener);\n        radioButton2.addItemListener(itemListener);\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(300, 200);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program4.png'>"
    }, 
    {
        "programName": "Java Program to Handle KeyBoardEvent",
        "code": "<span class='colorGreen'>// Java Program to Handle KeyBoardEvent</span>\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program5 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Keyboard Event Example\");\n\n        // Create a label to display pressed key\n        Label keyLabel = new Label(\"Pressed Key: \");\n\n        // Add components to the frame\n        frame.add(keyLabel);\n\n        // Set the positions of components within the frame\n        keyLabel.setBounds(20, 40, 200, 30);\n\n        // Add key listener to the frame\n        frame.addKeyListener(new KeyListener() {\n            @Override\n            public void keyTyped(KeyEvent e) {\n                // This method is called when a key is typed (pressed and released).\n                // Note: char result is undefined for some key types, such as function keys.\n                char pressedKey = e.getKeyChar();\n                keyLabel.setText(\"Pressed Key: \" + pressedKey);\n            }\n\n            @Override\n            public void keyPressed(KeyEvent e) {\n                // This method is called when a key is pressed down.\n            }\n\n            @Override\n            public void keyReleased(KeyEvent e) {\n                // This method is called when a key is released.\n            }\n        });\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(300, 200);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n\n        // Set focus to the frame to receive keyboard events\n        frame.setFocusable(true);\n        frame.requestFocus();\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program5.png'>"
    }, 
    {
        "programName": "Java Program to Handle MouseEvent",
        "code": "<span class='colorGreen'>// Java Program to Handle MouseEvent</span>\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program6 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Mouse Event Example\");\n\n        // Create a label to display mouse event information\n        Label mouseLabel = new Label(\"Mouse Event: \");\n\n        // Add components to the frame\n        frame.add(mouseLabel);\n\n        // Set the positions of components within the frame\n        mouseLabel.setBounds(20, 40, 200, 30);\n\n        // Add mouse listener to the frame\n        frame.addMouseListener(new MouseListener() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                mouseLabel.setText(\"Mouse Event: Clicked at (\" + e.getX() + \", \" + e.getY() + \")\");\n            }\n\n            @Override\n            public void mousePressed(MouseEvent e) {\n                mouseLabel.setText(\"Mouse Event: Pressed at (\" + e.getX() + \", \" + e.getY() + \")\");\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent e) {\n                mouseLabel.setText(\"Mouse Event: Released at (\" + e.getX() + \", \" + e.getY() + \")\");\n            }\n\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                mouseLabel.setText(\"Mouse Event: Entered at (\" + e.getX() + \", \" + e.getY() + \")\");\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                mouseLabel.setText(\"Mouse Event: Exited at (\" + e.getX() + \", \" + e.getY() + \")\");\n            }\n        });\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(300, 200);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program6.png'>"
    }, 
    {
        "programName": "Java Program to Get and Set State and Get Label of a Check Box",
        "code": "<span class='colorGreen'>// Java Program to Get and Set State and Get Label of a Check Box</span>\nimport java.awt.Checkbox;\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program7 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Checkbox Example\");\n\n        // Create a label to display checkbox information\n        Label checkboxLabel = new Label(\"Checkbox State: \");\n\n        // Create a checkbox\n        Checkbox checkbox = new Checkbox(\"Check me\");\n\n        // Add components to the frame\n        frame.add(checkboxLabel);\n        frame.add(checkbox);\n\n        // Set the positions of components within the frame\n        checkboxLabel.setBounds(20, 40, 200, 30);\n        checkbox.setBounds(20, 80, 100, 30);\n\n        // Add item listener to the checkbox\n        checkbox.addItemListener(new ItemListener() {\n            @Override\n            public void itemStateChanged(ItemEvent e) {\n                // Get the state and label of the checkbox when its state changes\n                boolean isChecked = checkbox.getState();\n                String label = checkbox.getLabel();\n                checkboxLabel.setText(\"Checkbox State: \" + (isChecked ? \"Checked\" : \"Unchecked\") + \", Label: \" + label);\n            }\n        });\n\n        // Set frame properties\n        frame.setLayout(null); // Set layout manager to null for absolute positioning\n        frame.setSize(300, 200);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program7.png'>"
    }, 
    {
        "programName": "Java Program to Create Check Boxes and Radio Buttons",
        "code": "<span class='colorGreen'>// Java Program to Create Check Boxes and Radio Buttons</span>\nimport java.awt.Button;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program9 {\n    public static void main(String[] args) {\n        // Create the main frame\n        Frame mainFrame = new Frame(\"Frame Switch Example\");\n\n        // Create a button to switch to Frame 2\n        Button switchToFrame2Button = new Button(\"Switch to Frame 2\");\n\n        // Add components to the main frame\n        mainFrame.add(switchToFrame2Button);\n\n        // Set the positions of components within the main frame\n        switchToFrame2Button.setBounds(20, 40, 150, 30);\n\n        // Add action listener to the button to switch frames\n        switchToFrame2Button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Create and display Frame 2\n                createAndShowFrame2();\n            }\n        });\n\n        // Set main frame properties\n        mainFrame.setLayout(null); // Set layout manager to null for absolute positioning\n        mainFrame.setSize(200, 150);\n        mainFrame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        mainFrame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the main frame is closed\n            }\n        });\n    }\n\n    // Function to create and show Frame 2\n    private static void createAndShowFrame2() {\n        // Create Frame 2\n        Frame frame2 = new Frame(\"Frame 2\");\n\n        // Create a button to switch back to the main frame\n        Button switchToMainFrameButton = new Button(\"Switch to Main Frame\");\n\n        // Add components to Frame 2\n        frame2.add(switchToMainFrameButton);\n\n        // Set the positions of components within Frame 2\n        switchToMainFrameButton.setBounds(20, 40, 150, 30);\n\n        // Add action listener to the button to switch back to the main frame\n        switchToMainFrameButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                frame2.dispose(); // Close Frame 2\n            }\n        });\n\n        // Set Frame 2 properties\n        frame2.setLayout(null); // Set layout manager to null for absolute positioning\n        frame2.setSize(200, 150);\n        frame2.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame2.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                frame2.dispose(); // Close Frame 2\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program8.png'>"
    }, 
    {
        "programName": "Java Program to Create and Switch between Frames using Buttons",
        "code": "<span class='colorGreen'>// Java Program to Create and Switch between Frames using Buttons</span>\n",
        "output": "<img src='delegationEventModelims/program9.png'>"
    }, 
    {
        "programName": "Java Program to Create a List Box to Select Multiple Items and Display it in the Frame",
        "code": "<span class='colorGreen'>// Java Program to Create a List Box to Select Multiple Items and Display it in the Frame</span>\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class program10 {\n    public static void main(String[] args) {\n        // Create a frame\n        JFrame frame = new JFrame(\"Button with Border Example\");\n\n        // Create buttons with borders\n        JButton button1 = createStyledButton(\"Button 1\");\n        JButton button2 = createStyledButton(\"Button 2\");\n\n        // Add components to the frame\n        frame.add(button1);\n        frame.add(button2);\n\n        // Set the layout manager (FlowLayout by default for JFrame)\n        frame.setLayout(null);\n\n        // Set the positions of components within the frame\n        button1.setBounds(20, 40, 120, 40);\n        button2.setBounds(20, 100, 120, 40);\n\n        // Set frame properties\n        frame.setSize(180, 180);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n    }\n\n    // Function to create a styled button with a border\n    private static JButton createStyledButton(String label) {\n        JButton button = new JButton(label);\n\n        // Set background and foreground color\n        button.setBackground(Color.lightGray);\n        button.setForeground(Color.black);\n\n        // Set font\n        button.setFont(new Font(\"Arial\", Font.BOLD, 14));\n\n        // Set border using LineBorder\n        button.setBorderPainted(true);\n\n        // Add action listener (optional)\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.out.println(\"Button clicked: \" + label);\n            }\n        });\n\n        return button;\n    }\n}        ",
        "output": "<img src='delegationEventModelims/program10.png'>"
    }, 
    {
        "programName": "Java Program to Create a List Box to Select Multiple Items and Display it in the Frame",
        "code": "<span class='colorGreen'>// Java Program to Create a List Box to Select Multiple Items and Display it in the Frame</span>\nimport java.awt.Button;\nimport java.awt.Frame;\nimport java.awt.List;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\n\npublic class program11 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame frame = new Frame(\"Multi-Select List Box Example\");\n\n        // Create a list box\n        List listBox = new List(4, true);\n\n        // Add items to the list box\n        listBox.add(\"Item 1\");\n        listBox.add(\"Item 2\");\n        listBox.add(\"Item 3\");\n        listBox.add(\"Item 4\");\n\n        // Create a button to display selected items\n        Button displayButton = new Button(\"Display Selected Items\");\n\n        // Add components to the frame\n        frame.add(listBox);\n        frame.add(displayButton);\n\n        // Set the layout manager (FlowLayout by default for Frame)\n        frame.setLayout(null);\n\n        // Set the positions of components within the frame\n        listBox.setBounds(20, 20, 150, 100);\n        displayButton.setBounds(20, 130, 200, 30);\n\n        // Add item listener to the list box to handle selection changes\n        listBox.addItemListener(new ItemListener() {\n            @Override\n            public void itemStateChanged(ItemEvent e) {\n                // Handle selection changes if needed\n            }\n        });\n\n        // Add action listener to the button to display selected items\n        displayButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Get the selected items from the list box\n                String[] selectedItems = listBox.getSelectedItems();\n\n                // Display selected items\n                System.out.print(\"Selected Items: \");\n                for (String selectedItem : selectedItems) {\n                    System.out.print(selectedItem + \", \");\n                }\n                System.out.println();\n            }\n        });\n\n        // Set frame properties\n        frame.setSize(250, 200);\n        frame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program11.png'>"
    }, 
    {
        "programName": "Java Program to Display a Message in a New Frame",
        "code": "<span class='colorGreen'>// Java Program to Display a Message in a New Frame</span>\n\nimport java.awt.Button;\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class program12 {\n    public static void main(String[] args) {\n        // Create the main frame\n        Frame mainFrame = new Frame(\"Main Frame\");\n\n        // Create a button to open the new frame\n        Button openButton = new Button(\"Open New Frame\");\n\n        // Add the button to the main frame\n        mainFrame.add(openButton);\n\n        // Set layout manager to null for absolute positioning\n        mainFrame.setLayout(null);\n\n        // Set the position of the button\n        openButton.setBounds(20, 40, 150, 30);\n\n        // Add action listener to the button to open the new frame\n        openButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Create and display the new frame\n                displayMessageFrame(\"Hello, This is a New Frame!\");\n            }\n        });\n\n        // Set main frame properties\n        mainFrame.setSize(200, 150);\n        mainFrame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        mainFrame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                System.exit(0); // Terminate the program when the main frame is closed\n            }\n        });\n    }\n\n    // Function to create and display a new frame with a message\n    private static void displayMessageFrame(String message) {\n        // Create a new frame\n        Frame messageFrame = new Frame(\"Message Frame\");\n\n        // Create a label to display the message\n        Label messageLabel = new Label(message);\n\n        // Add the label to the new frame\n        messageFrame.add(messageLabel);\n\n        // Set layout manager to null for absolute positioning\n        messageFrame.setLayout(null);\n\n        // Set the position of the label\n        messageLabel.setBounds(20, 40, 200, 30);\n\n        // Set new frame properties\n        messageFrame.setSize(250, 150);\n        messageFrame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        messageFrame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                messageFrame.dispose(); // Close the message frame\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program12.png'>"
    }, 
    {
        "programName": "Java Program to Close the Frame using WindowAdapter Class",
        "code": "<span class='colorGreen'>// Java Program to Close the Frame using WindowAdapter Class</span>\nimport java.awt.Frame;\nimport java.awt.Label;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program13 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame myFrame = new Frame(\"Close Frame Example\");\n\n        // Create a label\n        Label label = new Label(\"This is a frame. Close me!\");\n\n        // Add the label to the frame\n        myFrame.add(label);\n\n        // Set layout manager to null for absolute positioning\n        myFrame.setLayout(null);\n\n        // Set the position of the label\n        label.setBounds(20, 40, 200, 30);\n\n        // Set frame properties\n        myFrame.setSize(250, 150);\n        myFrame.setVisible(true);\n\n        // Add a window listener with WindowAdapter to handle the close event\n        myFrame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                // Close the frame when the close button is clicked\n                myFrame.dispose();\n            }\n        });\n    }\n}\n",
        "output": "<img src='delegationEventModelims/program13.png'>"
    }, 
    {
        "programName": "Java Program to Check Which Fonts are Available in a Local System",
        "code": "<span class='colorGreen'>// Java Program to Check Which Fonts are Available in a Local System</span>\nimport java.awt.Font;\nimport java.awt.GraphicsEnvironment;\n\npublic class program14 {\n    public static void main(String[] args) {\n        // Get the local graphics environment\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n\n        // Get an array of all available font family names\n        String[] fontNames = ge.getAvailableFontFamilyNames();\n\n        // Display the available fonts\n        System.out.println(\"Available Fonts:\");\n        for (String fontName : fontNames) {\n            System.out.println(fontName);\n        }\n    }\n}\n",
        "output": "Available Fonts:\nAgency FB\nAlgerian\nArial\nArial Black\nArial Narrow\nArial Rounded MT Bold\nArial Unicode MS\nBahnschrift\nBaskerville Old Face\n"
    }, 
    {
        "programName": "Java Program to Display Text in Different Fonts",
        "code": "<span class='colorGreen'>// Java Program to Display Text in Different Fonts</span>\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\npublic class program15 extends JFrame {\n    public program15() {\n        setTitle(\"Text in Different Fonts Example\");\n        setSize(600, 200);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        // Create a custom JPanel for drawing\n        JPanel panel = new JPanel() {\n            @Override\n            protected void paintComponent(Graphics g) {\n                super.paintComponent(g);\n\n                // Draw text in different fonts\n                drawText(g, \"Default Font\", 20, 30, new Font(\"Dialog\", Font.PLAIN, 16));\n                drawText(g, \"Serif Font\", 20, 60, new Font(\"Serif\", Font.BOLD, 18));\n                drawText(g, \"Sans-serif Font\", 20, 90, new Font(\"SansSerif\", Font.ITALIC, 20));\n                drawText(g, \"Monospaced Font\", 20, 120, new Font(\"Monospaced\", Font.PLAIN, 22));\n            }\n        };\n\n        add(panel);\n    }\n\n    private void drawText(Graphics g, String text, int x, int y, Font font) {\n        g.setFont(font);\n        g.drawString(text, x, y);\n    }\n\n    public static void main(String[] args) {\n        program15 example = new program15();\n        example.setVisible(true);\n    }\n}",
        "output": "<img src='delegationEventModelims/program15.png'>"
    }, 
    {
        "programName": "Java Program to Change Frame Background Color as Cyan",
        "code": "<span class='colorGreen'>// Java Program to Change Frame Background Color as Cyan</span>\nimport java.awt.Color;\nimport java.awt.Frame;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class program16 {\n    public static void main(String[] args) {\n        // Create a frame\n        Frame myFrame = new Frame(\"Frame Background Color Example\");\n\n        // Set the background color to cyan\n        myFrame.setBackground(Color.CYAN);\n\n        // Set frame properties\n        myFrame.setSize(300, 200);\n        myFrame.setVisible(true);\n\n        // Add a window listener to handle the close event\n        myFrame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0); // Terminate the program when the frame is closed\n            }\n        });\n    }\n}        ",
        "output": "<img src='delegationEventModelims/program16.png'>"
    }, 
    {
        "programName": " Java Program to Change the Applet Background Colour when Button Clicked",
        "code": "<span class='colorGreen'>//  Java Program to Change the Applet Background Colour when Button Clicked</span>\njava.applet has been deprecated and marked for removal",
        "output": ""
    }, 
    {
        "programName": "Java Program to Display Several Dots on the Screen Continuously",
        "code": "<span class='colorGreen'>// Java Program to Display Several Dots on the Screen Continuously</span>\n",
        "output": "<img src='delegationEventModelims/program18.png'>"
    }, 
    {
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": "<img src='delegationEventModelims/program19.png'>"
    }, 
    {
        "programName": "",
        "code": "<span class='colorGreen'>// </span>\n",
        "output": "<img src='delegationEventModelims/program20.png'>"
    }
]